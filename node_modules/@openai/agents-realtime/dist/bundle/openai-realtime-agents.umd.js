(function(N,B){typeof exports=="object"&&typeof module<"u"?B(exports):typeof define=="function"&&define.amd?define(["exports"],B):(N=typeof globalThis<"u"?globalThis:N||self,B(N.OpenAIAgentsRealtime={}))})(this,function(N){"use strict";var Sc=Object.defineProperty;var ya=N=>{throw TypeError(N)};var Tc=(N,B,Y)=>B in N?Sc(N,B,{enumerable:!0,configurable:!0,writable:!0,value:Y}):N[B]=Y;var _=(N,B,Y)=>Tc(N,typeof B!="symbol"?B+"":B,Y),Cr=(N,B,Y)=>B.has(N)||ya("Cannot "+Y);var u=(N,B,Y)=>(Cr(N,B,"read from private field"),Y?Y.call(N):B.get(N)),S=(N,B,Y)=>B.has(N)?ya("Cannot add the same private member more than once"):B instanceof WeakSet?B.add(N):B.set(N,Y),y=(N,B,Y,Ct)=>(Cr(N,B,"write to private field"),Ct?Ct.call(N,Y):B.set(N,Y),Y),Z=(N,B,Y)=>(Cr(N,B,"access private method"),Y);var gt,Bt,_t,Gt,zt,yt,ne,Re,Le,Ue,vt,ue,Or,Er,At,le,Vt,qt,Wt,Ht,nt,Je,Be,rt,Yt,wt,De,te,st,Fn,wa,pe,Xt,bt,ve,Ge,Qt,Kt,en,tn,xt,re,Nr,Rr,Dr,ba,Pr,at,nn,fe,rn,V,sn,it,an,ot,St,K,on,Pe,ut,ct,Ln,xa,L,P,un,D,Tt,kt,cn,H,dn,It,W,Un,Jn,Sa,Bn,Ta,jr,ka;const B={version:"0.0.6"};function Y(n){const e=atob(n),t=e.length,r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e.charCodeAt(s);return r.buffer}function Ct(n){const e=String.fromCharCode(...new Uint8Array(n));return btoa(e)}function Zr(n){if(typeof n>"u"||n===null||typeof n!="object"||!("type"in n)||typeof n.type!="string"||!n.type||n.type!=="message"||!("content"in n)||!Array.isArray(n.content)||n.content.length<1)return;const e=n.content[n.content.length-1];if(!(!("type"in e)||typeof e.type!="string")){if(e.type==="text")return typeof e.text=="string"?e.text:void 0;if(e.type==="audio")return typeof e.transcript=="string"?e.transcript:void 0}}function Ia(n,e){const t=n.filter(a=>!e.some(i=>i.itemId===a.itemId)),r=e.filter(a=>!n.some(i=>i.itemId===a.itemId)),s=e.filter(a=>n.some(i=>i.itemId===a.itemId&&JSON.stringify(i)!==JSON.stringify(a)));return{removals:t,additions:r,updates:s}}function Aa(){return typeof window>"u"?!1:typeof window.RTCPeerConnection<"u"}function Mr(n){return n.role==="system"?n:n.role==="assistant"?{...n,content:n.content.map(e=>e.type==="audio"?{...e,audio:null}:e)}:n.role==="user"?{...n,content:n.content.map(e=>e.type==="input_audio"?{...e,audio:null}:e)}:n}function Ca(n,e,t){const r=!t&&e.type==="message"?Mr(e):e,s=n.findIndex(a=>a.itemId===e.itemId);if(s!==-1)return n.map((a,i)=>i===s?r:!t&&a.type==="message"?Mr(a):a);if(e.previousItemId){const a=n.findIndex(i=>i.itemId===e.previousItemId);return a!==-1?[...n.slice(0,a+1),r,...n.slice(a+1)]:[...n,r]}else return[...n,r]}const Oa={"User-Agent":`Agents/JavaScript ${B.version}`,"X-OpenAI-Agents-SDK":`openai-agents-sdk.${B.version}`},Ea=`openai-agents-sdk.${B.version}`;async function Gn(n){try{return[null,await n()]}catch(e){return[e,null]}}function Na(n,e){const t={...n};return Object.defineProperties(t,{$brand:{value:"auto-parseable-response-format",enumerable:!1},$parseRaw:{value:e,enumerable:!1}}),t}const Ra=Symbol("Let zodToJsonSchema decide on which parser to use"),$r={name:void 0,$refStrategy:"root",effectStrategy:"input",pipeStrategy:"all",dateStrategy:"format:date-time",mapStrategy:"entries",nullableStrategy:"from-target",removeAdditionalStrategy:"passthrough",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,errorMessages:!1,markdownDescription:!1,patternStrategy:"escape",applyRegexFlags:!1,emailStrategy:"format:email",base64Strategy:"contentEncoding:base64",nameStrategy:"ref"},Da=n=>typeof n=="string"?{...$r,basePath:["#"],definitions:{},name:n}:{...$r,basePath:["#"],definitions:{},...n},zn=n=>"_def"in n?n._def:n;function Pa(n){if(!n)return!0;for(const e in n)return!1;return!0}const ja=n=>{const e=Da(n),t=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return{...e,currentPath:t,propertyPath:void 0,seenRefs:new Set,seen:new Map(Object.entries(e.definitions).map(([r,s])=>[zn(s),{def:zn(s),path:[...e.basePath,e.definitionPath,r],jsonSchema:void 0}]))}};function Fr(n,e,t,r){r!=null&&r.errorMessages&&t&&(n.errorMessage={...n.errorMessage,[e]:t})}function z(n,e,t,r,s){n[e]=t,Fr(n,e,r,s)}var Ot;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(o=>typeof s[s[o]]!="number"),i={};for(const o of a)i[o]=s[o];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(Ot||(Ot={}));var Lr;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(Lr||(Lr={})),Ot.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Ot.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);let Ur=class va extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let o=r,c=0;for(;c<i.path.length;){const p=i.path[c];c===i.path.length-1?(o[p]=o[p]||{_errors:[]},o[p]._errors.push(t(i))):o[p]=o[p]||{_errors:[]},o=o[p],c++}}};return s(this),r}static assert(e){if(!(e instanceof va))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,Ot.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}};Ur.create=n=>new Ur(n);var Jr;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(Jr||(Jr={}));var E;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(E||(E={}));function Za(){return{}}function Ma(n,e){var r,s;const t={type:"array"};return((s=(r=n.type)==null?void 0:r._def)==null?void 0:s.typeName)!==E.ZodAny&&(t.items=F(n.type._def,{...e,currentPath:[...e.currentPath,"items"]})),n.minLength&&z(t,"minItems",n.minLength.value,n.minLength.message,e),n.maxLength&&z(t,"maxItems",n.maxLength.value,n.maxLength.message,e),n.exactLength&&(z(t,"minItems",n.exactLength.value,n.exactLength.message,e),z(t,"maxItems",n.exactLength.value,n.exactLength.message,e)),t}function $a(n,e){const t={type:"integer",format:"int64"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"min":e.target==="jsonSchema7"?r.inclusive?z(t,"minimum",r.value,r.message,e):z(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),z(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?z(t,"maximum",r.value,r.message,e):z(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),z(t,"maximum",r.value,r.message,e));break;case"multipleOf":z(t,"multipleOf",r.value,r.message,e);break}return t}function Fa(){return{type:"boolean"}}function La(n,e){return F(n.type._def,e)}const Ua=(n,e)=>F(n.innerType._def,e);function Br(n,e,t){const r=t??e.dateStrategy;if(Array.isArray(r))return{anyOf:r.map((s,a)=>Br(n,e,s))};switch(r){case"string":case"format:date-time":return{type:"string",format:"date-time"};case"format:date":return{type:"string",format:"date"};case"integer":return Ja(n,e)}}const Ja=(n,e)=>{const t={type:"integer",format:"unix-time"};if(e.target==="openApi3")return t;for(const r of n.checks)switch(r.kind){case"min":z(t,"minimum",r.value,r.message,e);break;case"max":z(t,"maximum",r.value,r.message,e);break}return t};function Ba(n,e){return{...F(n.innerType._def,e),default:n.defaultValue()}}function Ga(n,e,t){return e.effectStrategy==="input"?F(n.schema._def,e,t):{}}function za(n){return{type:"string",enum:[...n.values]}}const Va=n=>"type"in n&&n.type==="string"?!1:"allOf"in n;function qa(n,e){const t=[F(n.left._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),F(n.right._def,{...e,currentPath:[...e.currentPath,"allOf","1"]})].filter(a=>!!a);let r=e.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0;const s=[];return t.forEach(a=>{if(Va(a))s.push(...a.allOf),a.unevaluatedProperties===void 0&&(r=void 0);else{let i=a;if("additionalProperties"in a&&a.additionalProperties===!1){const{additionalProperties:o,...c}=a;i=c}else r=void 0;s.push(i)}}),s.length?{allOf:s,...r}:void 0}function Wa(n,e){const t=typeof n.value;return t!=="bigint"&&t!=="number"&&t!=="boolean"&&t!=="string"?{type:Array.isArray(n.value)?"array":"object"}:e.target==="openApi3"?{type:t==="bigint"?"integer":t,enum:[n.value]}:{type:t==="bigint"?"integer":t,const:n.value}}let Vn;const ze={cuid:/^[cC][^\s-]{8,}$/,cuid2:/^[0-9a-z]+$/,ulid:/^[0-9A-HJKMNP-TV-Z]{26}$/,email:/^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,emoji:()=>(Vn===void 0&&(Vn=RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),Vn),base64:/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,nanoid:/^[a-zA-Z0-9_-]{21}$/};function Gr(n,e){const t={type:"string"};function r(s){return e.patternStrategy==="escape"?Ha(s):s}if(n.checks)for(const s of n.checks)switch(s.kind){case"min":z(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e);break;case"max":z(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"email":switch(e.emailStrategy){case"format:email":ge(t,"email",s.message,e);break;case"format:idn-email":ge(t,"idn-email",s.message,e);break;case"pattern:zod":_e(t,ze.email,s.message,e);break}break;case"url":ge(t,"uri",s.message,e);break;case"uuid":ge(t,"uuid",s.message,e);break;case"regex":_e(t,s.regex,s.message,e);break;case"cuid":_e(t,ze.cuid,s.message,e);break;case"cuid2":_e(t,ze.cuid2,s.message,e);break;case"startsWith":_e(t,RegExp(`^${r(s.value)}`),s.message,e);break;case"endsWith":_e(t,RegExp(`${r(s.value)}$`),s.message,e);break;case"datetime":ge(t,"date-time",s.message,e);break;case"date":ge(t,"date",s.message,e);break;case"time":ge(t,"time",s.message,e);break;case"duration":ge(t,"duration",s.message,e);break;case"length":z(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e),z(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"includes":{_e(t,RegExp(r(s.value)),s.message,e);break}case"ip":{s.version!=="v6"&&ge(t,"ipv4",s.message,e),s.version!=="v4"&&ge(t,"ipv6",s.message,e);break}case"emoji":_e(t,ze.emoji,s.message,e);break;case"ulid":{_e(t,ze.ulid,s.message,e);break}case"base64":{switch(e.base64Strategy){case"format:binary":{ge(t,"binary",s.message,e);break}case"contentEncoding:base64":{z(t,"contentEncoding","base64",s.message,e);break}case"pattern:zod":{_e(t,ze.base64,s.message,e);break}}break}case"nanoid":_e(t,ze.nanoid,s.message,e)}return t}const Ha=n=>Array.from(n).map(e=>/[a-zA-Z0-9]/.test(e)?e:`\\${e}`).join(""),ge=(n,e,t,r)=>{var s;n.format||(s=n.anyOf)!=null&&s.some(a=>a.format)?(n.anyOf||(n.anyOf=[]),n.format&&(n.anyOf.push({format:n.format,...n.errorMessage&&r.errorMessages&&{errorMessage:{format:n.errorMessage.format}}}),delete n.format,n.errorMessage&&(delete n.errorMessage.format,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.anyOf.push({format:e,...t&&r.errorMessages&&{errorMessage:{format:t}}})):z(n,"format",e,t,r)},_e=(n,e,t,r)=>{var s;n.pattern||(s=n.allOf)!=null&&s.some(a=>a.pattern)?(n.allOf||(n.allOf=[]),n.pattern&&(n.allOf.push({pattern:n.pattern,...n.errorMessage&&r.errorMessages&&{errorMessage:{pattern:n.errorMessage.pattern}}}),delete n.pattern,n.errorMessage&&(delete n.errorMessage.pattern,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.allOf.push({pattern:zr(e,r),...t&&r.errorMessages&&{errorMessage:{pattern:t}}})):z(n,"pattern",zr(e,r),t,r)},zr=(n,e)=>{var p;const t=typeof n=="function"?n():n;if(!e.applyRegexFlags||!t.flags)return t.source;const r={i:t.flags.includes("i"),m:t.flags.includes("m"),s:t.flags.includes("s")},s=r.i?t.source.toLowerCase():t.source;let a="",i=!1,o=!1,c=!1;for(let l=0;l<s.length;l++){if(i){a+=s[l],i=!1;continue}if(r.i){if(o){if(s[l].match(/[a-z]/)){c?(a+=s[l],a+=`${s[l-2]}-${s[l]}`.toUpperCase(),c=!1):s[l+1]==="-"&&((p=s[l+2])!=null&&p.match(/[a-z]/))?(a+=s[l],c=!0):a+=`${s[l]}${s[l].toUpperCase()}`;continue}}else if(s[l].match(/[a-z]/)){a+=`[${s[l]}${s[l].toUpperCase()}]`;continue}}if(r.m){if(s[l]==="^"){a+=`(^|(?<=[\r
]))`;continue}else if(s[l]==="$"){a+=`($|(?=[\r
]))`;continue}}if(r.s&&s[l]==="."){a+=o?`${s[l]}\r
`:`[${s[l]}\r
]`;continue}a+=s[l],s[l]==="\\"?i=!0:o&&s[l]==="]"?o=!1:!o&&s[l]==="["&&(o=!0)}try{const l=new RegExp(a)}catch{return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`),t.source}return a};function Vr(n,e){var r,s,a,i;if(e.target==="openApi3"&&((r=n.keyType)==null?void 0:r._def.typeName)===E.ZodEnum)return{type:"object",required:n.keyType._def.values,properties:n.keyType._def.values.reduce((o,c)=>({...o,[c]:F(n.valueType._def,{...e,currentPath:[...e.currentPath,"properties",c]})??{}}),{}),additionalProperties:!1};const t={type:"object",additionalProperties:F(n.valueType._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??{}};if(e.target==="openApi3")return t;if(((s=n.keyType)==null?void 0:s._def.typeName)===E.ZodString&&((a=n.keyType._def.checks)!=null&&a.length)){const o=Object.entries(Gr(n.keyType._def,e)).reduce((c,[p,l])=>p==="type"?c:{...c,[p]:l},{});return{...t,propertyNames:o}}else if(((i=n.keyType)==null?void 0:i._def.typeName)===E.ZodEnum)return{...t,propertyNames:{enum:n.keyType._def.values}};return t}function Ya(n,e){if(e.mapStrategy==="record")return Vr(n,e);const t=F(n.keyType._def,{...e,currentPath:[...e.currentPath,"items","items","0"]})||{},r=F(n.valueType._def,{...e,currentPath:[...e.currentPath,"items","items","1"]})||{};return{type:"array",maxItems:125,items:{type:"array",items:[t,r],minItems:2,maxItems:2}}}function Xa(n){const e=n.values,r=Object.keys(n.values).filter(a=>typeof e[e[a]]!="number").map(a=>e[a]),s=Array.from(new Set(r.map(a=>typeof a)));return{type:s.length===1?s[0]==="string"?"string":"number":["string","number"],enum:r}}function Qa(){return{not:{}}}function Ka(n){return n.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}const ln={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function ei(n,e){if(e.target==="openApi3")return qr(n,e);const t=n.options instanceof Map?Array.from(n.options.values()):n.options;if(t.every(r=>r._def.typeName in ln&&(!r._def.checks||!r._def.checks.length))){const r=t.reduce((s,a)=>{const i=ln[a._def.typeName];return i&&!s.includes(i)?[...s,i]:s},[]);return{type:r.length>1?r:r[0]}}else if(t.every(r=>r._def.typeName==="ZodLiteral"&&!r.description)){const r=t.reduce((s,a)=>{const i=typeof a._def.value;switch(i){case"string":case"number":case"boolean":return[...s,i];case"bigint":return[...s,"integer"];case"object":if(a._def.value===null)return[...s,"null"];case"symbol":case"undefined":case"function":default:return s}},[]);if(r.length===t.length){const s=r.filter((a,i,o)=>o.indexOf(a)===i);return{type:s.length>1?s:s[0],enum:t.reduce((a,i)=>a.includes(i._def.value)?a:[...a,i._def.value],[])}}}else if(t.every(r=>r._def.typeName==="ZodEnum"))return{type:"string",enum:t.reduce((r,s)=>[...r,...s._def.values.filter(a=>!r.includes(a))],[])};return qr(n,e)}const qr=(n,e)=>{const t=(n.options instanceof Map?Array.from(n.options.values()):n.options).map((r,s)=>F(r._def,{...e,currentPath:[...e.currentPath,"anyOf",`${s}`]})).filter(r=>!!r&&(!e.strictUnions||typeof r=="object"&&Object.keys(r).length>0));return t.length?{anyOf:t}:void 0};function ti(n,e){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(n.innerType._def.typeName)&&(!n.innerType._def.checks||!n.innerType._def.checks.length))return e.target==="openApi3"||e.nullableStrategy==="property"?{type:ln[n.innerType._def.typeName],nullable:!0}:{type:[ln[n.innerType._def.typeName],"null"]};if(e.target==="openApi3"){const r=F(n.innerType._def,{...e,currentPath:[...e.currentPath]});return r&&"$ref"in r?{allOf:[r],nullable:!0}:r&&{...r,nullable:!0}}const t=F(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","0"]});return t&&{anyOf:[t,{type:"null"}]}}function ni(n,e){const t={type:"number"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"int":t.type="integer",Fr(t,"type",r.message,e);break;case"min":e.target==="jsonSchema7"?r.inclusive?z(t,"minimum",r.value,r.message,e):z(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),z(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?z(t,"maximum",r.value,r.message,e):z(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),z(t,"maximum",r.value,r.message,e));break;case"multipleOf":z(t,"multipleOf",r.value,r.message,e);break}return t}function ri(n,e){return e.removeAdditionalStrategy==="strict"?n.catchall._def.typeName==="ZodNever"?n.unknownKeys!=="strict":F(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0:n.catchall._def.typeName==="ZodNever"?n.unknownKeys==="passthrough":F(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0}function si(n,e){const t={type:"object",...Object.entries(n.shape()).reduce((r,[s,a])=>{var c;if(a===void 0||a._def===void 0)return r;const i=[...e.currentPath,"properties",s],o=F(a._def,{...e,currentPath:i,propertyPath:i});if(o===void 0)return r;if(e.openaiStrictMode&&a.isOptional()&&!a.isNullable()&&typeof((c=a._def)==null?void 0:c.defaultValue)>"u")throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);return{properties:{...r.properties,[s]:o},required:a.isOptional()&&!e.openaiStrictMode?r.required:[...r.required,s]}},{properties:{},required:[]}),additionalProperties:ri(n,e)};return t.required.length||delete t.required,t}const ai=(n,e)=>{var r;if(e.currentPath.toString()===((r=e.propertyPath)==null?void 0:r.toString()))return F(n.innerType._def,e);const t=F(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","1"]});return t?{anyOf:[{not:{}},t]}:{}},ii=(n,e)=>{if(e.pipeStrategy==="input")return F(n.in._def,e);if(e.pipeStrategy==="output")return F(n.out._def,e);const t=F(n.in._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),r=F(n.out._def,{...e,currentPath:[...e.currentPath,"allOf",t?"1":"0"]});return{allOf:[t,r].filter(s=>s!==void 0)}};function oi(n,e){return F(n.type._def,e)}function ui(n,e){const r={type:"array",uniqueItems:!0,items:F(n.valueType._def,{...e,currentPath:[...e.currentPath,"items"]})};return n.minSize&&z(r,"minItems",n.minSize.value,n.minSize.message,e),n.maxSize&&z(r,"maxItems",n.maxSize.value,n.maxSize.message,e),r}function ci(n,e){return n.rest?{type:"array",minItems:n.items.length,items:n.items.map((t,r)=>F(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[]),additionalItems:F(n.rest._def,{...e,currentPath:[...e.currentPath,"additionalItems"]})}:{type:"array",minItems:n.items.length,maxItems:n.items.length,items:n.items.map((t,r)=>F(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[])}}function di(){return{not:{}}}function li(){return{}}const pi=(n,e)=>F(n.innerType._def,e);function F(n,e,t=!1){var i;const r=e.seen.get(n);if(e.override){const o=(i=e.override)==null?void 0:i.call(e,n,e,r,t);if(o!==Ra)return o}if(r&&!t){const o=fi(r,e);if(o!==void 0)return"$ref"in o&&e.seenRefs.add(o.$ref),o}const s={def:n,path:e.currentPath,jsonSchema:void 0};e.seen.set(n,s);const a=mi(n,n.typeName,e,t);return a&&gi(n,e,a),s.jsonSchema=a,a}const fi=(n,e)=>{switch(e.$refStrategy){case"root":return{$ref:n.path.join("/")};case"extract-to-root":const t=n.path.slice(e.basePath.length+1).join("_");return t!==e.name&&e.nameStrategy==="duplicate-ref"&&(e.definitions[t]=n.def),{$ref:[...e.basePath,e.definitionPath,t].join("/")};case"relative":return{$ref:hi(e.currentPath,n.path)};case"none":case"seen":return n.path.length<e.currentPath.length&&n.path.every((r,s)=>e.currentPath[s]===r)?(console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`),{}):e.$refStrategy==="seen"?{}:void 0}},hi=(n,e)=>{let t=0;for(;t<n.length&&t<e.length&&n[t]===e[t];t++);return[(n.length-t).toString(),...e.slice(t)].join("/")},mi=(n,e,t,r)=>{switch(e){case E.ZodString:return Gr(n,t);case E.ZodNumber:return ni(n,t);case E.ZodObject:return si(n,t);case E.ZodBigInt:return $a(n,t);case E.ZodBoolean:return Fa();case E.ZodDate:return Br(n,t);case E.ZodUndefined:return di();case E.ZodNull:return Ka(t);case E.ZodArray:return Ma(n,t);case E.ZodUnion:case E.ZodDiscriminatedUnion:return ei(n,t);case E.ZodIntersection:return qa(n,t);case E.ZodTuple:return ci(n,t);case E.ZodRecord:return Vr(n,t);case E.ZodLiteral:return Wa(n,t);case E.ZodEnum:return za(n);case E.ZodNativeEnum:return Xa(n);case E.ZodNullable:return ti(n,t);case E.ZodOptional:return ai(n,t);case E.ZodMap:return Ya(n,t);case E.ZodSet:return ui(n,t);case E.ZodLazy:return F(n.getter()._def,t);case E.ZodPromise:return oi(n,t);case E.ZodNaN:case E.ZodNever:return Qa();case E.ZodEffects:return Ga(n,t,r);case E.ZodAny:return Za();case E.ZodUnknown:return li();case E.ZodDefault:return Ba(n,t);case E.ZodBranded:return La(n,t);case E.ZodReadonly:return pi(n,t);case E.ZodCatch:return Ua(n,t);case E.ZodPipeline:return ii(n,t);case E.ZodFunction:case E.ZodVoid:case E.ZodSymbol:return;default:return(s=>{})()}},gi=(n,e,t)=>(n.description&&(t.description=n.description,e.markdownDescription&&(t.markdownDescription=n.description)),t),_i=(n,e)=>{const t=ja(e),r=typeof e=="string"?e:(e==null?void 0:e.nameStrategy)==="title"||e==null?void 0:e.name,s=F(n._def,r===void 0?t:{...t,currentPath:[...t.basePath,t.definitionPath,r]},!1)??{},a=typeof e=="object"&&e.name!==void 0&&e.nameStrategy==="title"?e.name:void 0;a!==void 0&&(s.title=a);const i=(()=>{if(Pa(t.definitions))return;const c={},p=new Set;for(let l=0;l<500;l++){const h=Object.entries(t.definitions).filter(([f])=>!p.has(f));if(h.length===0)break;for(const[f,b]of h)c[f]=F(zn(b),{...t,currentPath:[...t.basePath,t.definitionPath,f]},!0)??{},p.add(f)}return c})(),o=r===void 0?i?{...s,[t.definitionPath]:i}:s:t.nameStrategy==="duplicate-ref"?{...s,...i||t.seenRefs.size?{[t.definitionPath]:{...i,...t.seenRefs.size?{[r]:s}:void 0}}:void 0}:{$ref:[...t.$refStrategy==="relative"?[]:t.basePath,t.definitionPath,r].join("/"),[t.definitionPath]:{...i,[r]:s}};return t.target==="jsonSchema7"?o.$schema="http://json-schema.org/draft-07/schema#":t.target==="jsonSchema2019-09"&&(o.$schema="https://json-schema.org/draft/2019-09/schema#"),o};function yi(n,{parser:e,callback:t}){const r={...n};return Object.defineProperties(r,{$brand:{value:"auto-parseable-tool",enumerable:!1},$parseRaw:{value:e,enumerable:!1},$callback:{value:t,enumerable:!1}}),r}function Wr(n,e){return _i(n,{openaiStrictMode:!0,name:e.name,nameStrategy:"duplicate-ref",$refStrategy:"extract-to-root",nullableStrategy:"property"})}function vi(n,e,t){return Na({type:"json_schema",...t,name:e,strict:!0,schema:Wr(n,{name:e})},r=>n.parse(JSON.parse(r)))}function wi(n){return yi({type:"function",name:n.name,parameters:Wr(n.parameters,{name:n.name}),strict:!0},{callback:n.function,parser:e=>n.parameters.parse(JSON.parse(e))})}class Ze extends Error{constructor(t,r){super(t);_(this,"state");this.state=r}}class bi extends Ze{}class Hr extends Ze{}class he extends Ze{}class Q extends Ze{}class Yr extends Ze{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class xi extends Ze{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class Xr extends Ze{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}class pn extends Ze{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}function Ve(n){return typeof n=="object"&&n!==null&&"_def"in n&&typeof n._def=="object"&&n._def!==null&&"typeName"in n._def&&n._def.typeName==="ZodObject"}function Si(n){return typeof n=="object"&&n!==null&&"input"in n&&typeof n.input=="string"}function fn(n){if(n=n.replace(/\s/g,"_"),n=n.replace(/[^a-zA-Z0-9]/g,"_"),n.length===0)throw new Error("Tool name cannot be empty");return n}function qn(n,e){const t=r=>JSON.parse(r);if(Ve(n)){const r=wi({name:e,parameters:n,function:()=>{}});return{schema:r.parameters,parser:r.$parseRaw}}else if(typeof n=="object"&&n!==null)return{schema:n,parser:t};throw new Q("Input type is not a ZodObject or a valid JSON schema")}function Qr(n){if(n==="text")return"text";if(Ve(n)){const e=vi(n,"output");return{type:e.type,name:e.name,strict:e.strict||!1,schema:e.schema}}return n}function Ti(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var hn={exports:{}},Wn,Kr;function ki(){if(Kr)return Wn;Kr=1;var n=1e3,e=n*60,t=e*60,r=t*24,s=r*7,a=r*365.25;Wn=function(l,h){h=h||{};var f=typeof l;if(f==="string"&&l.length>0)return i(l);if(f==="number"&&isFinite(l))return h.long?c(l):o(l);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(l))};function i(l){if(l=String(l),!(l.length>100)){var h=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(l);if(h){var f=parseFloat(h[1]),b=(h[2]||"ms").toLowerCase();switch(b){case"years":case"year":case"yrs":case"yr":case"y":return f*a;case"weeks":case"week":case"w":return f*s;case"days":case"day":case"d":return f*r;case"hours":case"hour":case"hrs":case"hr":case"h":return f*t;case"minutes":case"minute":case"mins":case"min":case"m":return f*e;case"seconds":case"second":case"secs":case"sec":case"s":return f*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return f;default:return}}}}function o(l){var h=Math.abs(l);return h>=r?Math.round(l/r)+"d":h>=t?Math.round(l/t)+"h":h>=e?Math.round(l/e)+"m":h>=n?Math.round(l/n)+"s":l+"ms"}function c(l){var h=Math.abs(l);return h>=r?p(l,h,r,"day"):h>=t?p(l,h,t,"hour"):h>=e?p(l,h,e,"minute"):h>=n?p(l,h,n,"second"):l+" ms"}function p(l,h,f,b){var A=h>=f*1.5;return Math.round(l/f)+" "+b+(A?"s":"")}return Wn}var Hn,es;function Ii(){if(es)return Hn;es=1;function n(e){r.debug=r,r.default=r,r.coerce=p,r.disable=o,r.enable=a,r.enabled=c,r.humanize=ki(),r.destroy=l,Object.keys(e).forEach(h=>{r[h]=e[h]}),r.names=[],r.skips=[],r.formatters={};function t(h){let f=0;for(let b=0;b<h.length;b++)f=(f<<5)-f+h.charCodeAt(b),f|=0;return r.colors[Math.abs(f)%r.colors.length]}r.selectColor=t;function r(h){let f,b=null,A,q;function $(...J){if(!$.enabled)return;const se=$,ce=Number(new Date),je=ce-(f||ce);se.diff=je,se.prev=f,se.curr=ce,f=ce,J[0]=r.coerce(J[0]),typeof J[0]!="string"&&J.unshift("%O");let ke=0;J[0]=J[0].replace(/%([a-zA-Z%])/g,(Ar,bc)=>{if(Ar==="%%")return"%";ke++;const _a=r.formatters[bc];if(typeof _a=="function"){const xc=J[ke];Ar=_a.call(se,xc),J.splice(ke,1),ke--}return Ar}),r.formatArgs.call(se,J),(se.log||r.log).apply(se,J)}return $.namespace=h,$.useColors=r.useColors(),$.color=r.selectColor(h),$.extend=s,$.destroy=r.destroy,Object.defineProperty($,"enabled",{enumerable:!0,configurable:!1,get:()=>b!==null?b:(A!==r.namespaces&&(A=r.namespaces,q=r.enabled(h)),q),set:J=>{b=J}}),typeof r.init=="function"&&r.init($),$}function s(h,f){const b=r(this.namespace+(typeof f>"u"?":":f)+h);return b.log=this.log,b}function a(h){r.save(h),r.namespaces=h,r.names=[],r.skips=[];const f=(typeof h=="string"?h:"").trim().replace(" ",",").split(",").filter(Boolean);for(const b of f)b[0]==="-"?r.skips.push(b.slice(1)):r.names.push(b)}function i(h,f){let b=0,A=0,q=-1,$=0;for(;b<h.length;)if(A<f.length&&(f[A]===h[b]||f[A]==="*"))f[A]==="*"?(q=A,$=b,A++):(b++,A++);else if(q!==-1)A=q+1,$++,b=$;else return!1;for(;A<f.length&&f[A]==="*";)A++;return A===f.length}function o(){const h=[...r.names,...r.skips.map(f=>"-"+f)].join(",");return r.enable(""),h}function c(h){for(const f of r.skips)if(i(h,f))return!1;for(const f of r.names)if(i(h,f))return!0;return!1}function p(h){return h instanceof Error?h.stack||h.message:h}function l(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.enable(r.load()),r}return Hn=n,Hn}var ts;function Ai(){return ts||(ts=1,function(n,e){e.formatArgs=r,e.save=s,e.load=a,e.useColors=t,e.storage=i(),e.destroy=(()=>{let c=!1;return()=>{c||(c=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function t(){if(typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs))return!0;if(typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let c;return typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&(c=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(c[1],10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function r(c){if(c[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+c[0]+(this.useColors?"%c ":" ")+"+"+n.exports.humanize(this.diff),!this.useColors)return;const p="color: "+this.color;c.splice(1,0,p,"color: inherit");let l=0,h=0;c[0].replace(/%[a-zA-Z%]/g,f=>{f!=="%%"&&(l++,f==="%c"&&(h=l))}),c.splice(h,0,p)}e.log=console.debug||console.log||(()=>{});function s(c){try{c?e.storage.setItem("debug",c):e.storage.removeItem("debug")}catch{}}function a(){let c;try{c=e.storage.getItem("debug")}catch{}return!c&&typeof process<"u"&&"env"in process&&(c=process.env.DEBUG),c}function i(){try{return localStorage}catch{}}n.exports=Ii()(e);const{formatters:o}=n.exports;o.j=function(c){try{return JSON.stringify(c)}catch(p){return"[UnexpectedJSONParseError]: "+p.message}}}(hn,hn.exports)),hn.exports}var Ci=Ai();const Oi=Ti(Ci);function Ei(){return po()}function ns(n){const e=Ei();return typeof e<"u"&&(e[n]==="true"||e[n]==="1")}const rs={get disabled(){return!0}},ss={get dontLogModelData(){return ns("OPENAI_AGENTS_DONT_LOG_MODEL_DATA")},get dontLogToolData(){return ns("OPENAI_AGENTS_DONT_LOG_TOOL_DATA")}},Ni=ss.dontLogModelData,Ri=ss.dontLogToolData;function as(n="openai-agents"){return{namespace:n,debug:Oi(n),error:console.error,warn:console.warn,dontLogModelData:Ni,dontLogToolData:Ri}}const I=as("openai-agents:core");function qe(n){if(n==null)return String(n);if(typeof n=="string")return n;if(typeof n=="object")try{return JSON.stringify(n)}catch{return"[object with circular references]"}return String(n)}function Di(n,e){return`An error occurred while running the tool. Please try again. Error: ${e instanceof Error?e.toString():String(e)}`}function mn(n){const e=n.name?fn(n.name):fn(n.execute.name),t=typeof n.errorFunction>"u"?Di:n.errorFunction;if(!e)throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");const r=n.strict??!0;if(!r&&Ve(n.parameters))throw new Q("Strict mode is required for Zod parameters");const{parser:s,schema:a}=qn(n.parameters,e);async function i(p,l){const[h,f]=await Gn(()=>s(l));if(h!==null)throw I.dontLogToolData?I.debug(`Invalid JSON input for tool ${e}`):I.debug(`Invalid JSON input for tool ${e}: ${l}`),new he("Invalid JSON input for tool");I.dontLogToolData?I.debug(`Invoking tool ${e}`):I.debug(`Invoking tool ${e} with input ${l}`);const b=await n.execute(f,p),A=qe(b);return I.dontLogToolData?I.debug(`Tool ${e} completed`):I.debug(`Tool ${e} returned: ${A}`),b}async function o(p,l){return i(p,l).catch(h=>{if(t){const f=jt();return f==null||f.setError({message:"Error running tool (non-fatal)",data:{tool_name:e,error:h.toString()}}),t(p,h)}throw h})}const c=typeof n.needsApproval=="function"?n.needsApproval:async()=>typeof n.needsApproval=="boolean"?n.needsApproval:!1;return{type:"function",name:e,description:n.description,parameters:a,strict:r,invoke:o,needsApproval:c}}var M;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(o=>typeof s[s[o]]!="number"),i={};for(const o of a)i[o]=s[o];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(M||(M={}));var is;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(is||(is={}));const x=M.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Me=n=>{switch(typeof n){case"undefined":return x.undefined;case"string":return x.string;case"number":return Number.isNaN(n)?x.nan:x.number;case"boolean":return x.boolean;case"function":return x.function;case"bigint":return x.bigint;case"symbol":return x.symbol;case"object":return Array.isArray(n)?x.array:n===null?x.null:n.then&&typeof n.then=="function"&&n.catch&&typeof n.catch=="function"?x.promise:typeof Map<"u"&&n instanceof Map?x.map:typeof Set<"u"&&n instanceof Set?x.set:typeof Date<"u"&&n instanceof Date?x.date:x.object;default:return x.unknown}},v=M.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);class Ie extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let o=r,c=0;for(;c<i.path.length;){const p=i.path[c];c===i.path.length-1?(o[p]=o[p]||{_errors:[]},o[p]._errors.push(t(i))):o[p]=o[p]||{_errors:[]},o=o[p],c++}}};return s(this),r}static assert(e){if(!(e instanceof Ie))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,M.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}}Ie.create=n=>new Ie(n);const Yn=(n,e)=>{let t;switch(n.code){case v.invalid_type:n.received===x.undefined?t="Required":t=`Expected ${n.expected}, received ${n.received}`;break;case v.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(n.expected,M.jsonStringifyReplacer)}`;break;case v.unrecognized_keys:t=`Unrecognized key(s) in object: ${M.joinValues(n.keys,", ")}`;break;case v.invalid_union:t="Invalid input";break;case v.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${M.joinValues(n.options)}`;break;case v.invalid_enum_value:t=`Invalid enum value. Expected ${M.joinValues(n.options)}, received '${n.received}'`;break;case v.invalid_arguments:t="Invalid function arguments";break;case v.invalid_return_type:t="Invalid function return type";break;case v.invalid_date:t="Invalid date";break;case v.invalid_string:typeof n.validation=="object"?"includes"in n.validation?(t=`Invalid input: must include "${n.validation.includes}"`,typeof n.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${n.validation.position}`)):"startsWith"in n.validation?t=`Invalid input: must start with "${n.validation.startsWith}"`:"endsWith"in n.validation?t=`Invalid input: must end with "${n.validation.endsWith}"`:M.assertNever(n.validation):n.validation!=="regex"?t=`Invalid ${n.validation}`:t="Invalid";break;case v.too_small:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at least":"more than"} ${n.minimum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at least":"over"} ${n.minimum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${n.minimum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(n.minimum))}`:t="Invalid input";break;case v.too_big:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at most":"less than"} ${n.maximum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at most":"under"} ${n.maximum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="bigint"?t=`BigInt must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly":n.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(n.maximum))}`:t="Invalid input";break;case v.custom:t="Invalid input";break;case v.invalid_intersection_types:t="Intersection results could not be merged";break;case v.not_multiple_of:t=`Number must be a multiple of ${n.multipleOf}`;break;case v.not_finite:t="Number must be finite";break;default:t=e.defaultError,M.assertNever(n)}return{message:t}};let Pi=Yn;function ji(){return Pi}const Zi=n=>{const{data:e,path:t,errorMaps:r,issueData:s}=n,a=[...t,...s.path||[]],i={...s,path:a};if(s.message!==void 0)return{...s,path:a,message:s.message};let o="";const c=r.filter(p=>!!p).slice().reverse();for(const p of c)o=p(i,{data:e,defaultError:o}).message;return{...s,path:a,message:o}};function w(n,e){const t=ji(),r=Zi({issueData:e,data:n.data,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,t,t===Yn?void 0:Yn].filter(s=>!!s)});n.common.issues.push(r)}class ae{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){const r=[];for(const s of t){if(s.status==="aborted")return C;s.status==="dirty"&&e.dirty(),r.push(s.value)}return{status:e.value,value:r}}static async mergeObjectAsync(e,t){const r=[];for(const s of t){const a=await s.key,i=await s.value;r.push({key:a,value:i})}return ae.mergeObjectSync(e,r)}static mergeObjectSync(e,t){const r={};for(const s of t){const{key:a,value:i}=s;if(a.status==="aborted"||i.status==="aborted")return C;a.status==="dirty"&&e.dirty(),i.status==="dirty"&&e.dirty(),a.value!=="__proto__"&&(typeof i.value<"u"||s.alwaysSet)&&(r[a.value]=i.value)}return{status:e.value,value:r}}}const C=Object.freeze({status:"aborted"}),Et=n=>({status:"dirty",value:n}),me=n=>({status:"valid",value:n}),os=n=>n.status==="aborted",us=n=>n.status==="dirty",dt=n=>n.status==="valid",gn=n=>typeof Promise<"u"&&n instanceof Promise;var T;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(T||(T={}));class we{constructor(e,t,r,s){this._cachedPath=[],this.parent=e,this.data=t,this._path=r,this._key=s}get path(){return this._cachedPath.length||(Array.isArray(this._key)?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const cs=(n,e)=>{if(dt(e))return{success:!0,data:e.value};if(!n.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new Ie(n.common.issues);return this._error=t,this._error}}};function R(n){if(!n)return{};const{errorMap:e,invalid_type_error:t,required_error:r,description:s}=n;if(e&&(t||r))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:s}:{errorMap:(i,o)=>{const{message:c}=n;return i.code==="invalid_enum_value"?{message:c??o.defaultError}:typeof o.data>"u"?{message:c??r??o.defaultError}:i.code!=="invalid_type"?{message:o.defaultError}:{message:c??t??o.defaultError}},description:s}}class j{get description(){return this._def.description}_getType(e){return Me(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:Me(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new ae,ctx:{common:e.parent.common,data:e.data,parsedType:Me(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(gn(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const r=this.safeParse(e,t);if(r.success)return r.data;throw r.error}safeParse(e,t){const r={common:{issues:[],async:(t==null?void 0:t.async)??!1,contextualErrorMap:t==null?void 0:t.errorMap},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Me(e)},s=this._parseSync({data:e,path:r.path,parent:r});return cs(r,s)}"~validate"(e){var r,s;const t={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Me(e)};if(!this["~standard"].async)try{const a=this._parseSync({data:e,path:[],parent:t});return dt(a)?{value:a.value}:{issues:t.common.issues}}catch(a){(s=(r=a==null?void 0:a.message)==null?void 0:r.toLowerCase())!=null&&s.includes("encountered")&&(this["~standard"].async=!0),t.common={issues:[],async:!0}}return this._parseAsync({data:e,path:[],parent:t}).then(a=>dt(a)?{value:a.value}:{issues:t.common.issues})}async parseAsync(e,t){const r=await this.safeParseAsync(e,t);if(r.success)return r.data;throw r.error}async safeParseAsync(e,t){const r={common:{issues:[],contextualErrorMap:t==null?void 0:t.errorMap,async:!0},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Me(e)},s=this._parse({data:e,path:r.path,parent:r}),a=await(gn(s)?s:Promise.resolve(s));return cs(r,a)}refine(e,t){const r=s=>typeof t=="string"||typeof t>"u"?{message:t}:typeof t=="function"?t(s):t;return this._refinement((s,a)=>{const i=e(s),o=()=>a.addIssue({code:v.custom,...r(s)});return typeof Promise<"u"&&i instanceof Promise?i.then(c=>c?!0:(o(),!1)):i?!0:(o(),!1)})}refinement(e,t){return this._refinement((r,s)=>e(r)?!0:(s.addIssue(typeof t=="function"?t(r,s):t),!1))}_refinement(e){return new Ye({schema:this,typeName:O.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this),this["~standard"]={version:1,vendor:"zod",validate:t=>this["~validate"](t)}}optional(){return Oe.create(this,this._def)}nullable(){return Xe.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return be.create(this)}promise(){return Sn.create(this,this._def)}or(e){return yn.create([this,e],this._def)}and(e){return vn.create(this,e,this._def)}transform(e){return new Ye({...R(this._def),schema:this,typeName:O.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t=typeof e=="function"?e:()=>e;return new Tn({...R(this._def),innerType:this,defaultValue:t,typeName:O.ZodDefault})}brand(){return new ys({typeName:O.ZodBranded,type:this,...R(this._def)})}catch(e){const t=typeof e=="function"?e:()=>e;return new kn({...R(this._def),innerType:this,catchValue:t,typeName:O.ZodCatch})}describe(e){const t=this.constructor;return new t({...this._def,description:e})}pipe(e){return ar.create(this,e)}readonly(){return In.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const Mi=/^c[^\s-]{8,}$/i,$i=/^[0-9a-z]+$/,Fi=/^[0-9A-HJKMNP-TV-Z]{26}$/i,Li=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,Ui=/^[a-z0-9_-]{21}$/i,Ji=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,Bi=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,Gi=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,zi="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let Xn;const Vi=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,qi=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,Wi=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,Hi=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,Yi=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,Xi=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,ds="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",Qi=new RegExp(`^${ds}$`);function ls(n){let e="[0-5]\\d";n.precision?e=`${e}\\.\\d{${n.precision}}`:n.precision==null&&(e=`${e}(\\.\\d+)?`);const t=n.precision?"+":"?";return`([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`}function Ki(n){return new RegExp(`^${ls(n)}$`)}function eo(n){let e=`${ds}T${ls(n)}`;const t=[];return t.push(n.local?"Z?":"Z"),n.offset&&t.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${t.join("|")})`,new RegExp(`^${e}$`)}function to(n,e){return!!((e==="v4"||!e)&&Vi.test(n)||(e==="v6"||!e)&&Wi.test(n))}function no(n,e){if(!Ji.test(n))return!1;try{const[t]=n.split("."),r=t.replace(/-/g,"+").replace(/_/g,"/").padEnd(t.length+(4-t.length%4)%4,"="),s=JSON.parse(atob(r));return!(typeof s!="object"||s===null||"typ"in s&&(s==null?void 0:s.typ)!=="JWT"||!s.alg||e&&s.alg!==e)}catch{return!1}}function ro(n,e){return!!((e==="v4"||!e)&&qi.test(n)||(e==="v6"||!e)&&Hi.test(n))}class Ae extends j{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==x.string){const a=this._getOrReturnCtx(e);return w(a,{code:v.invalid_type,expected:x.string,received:a.parsedType}),C}const r=new ae;let s;for(const a of this._def.checks)if(a.kind==="min")e.data.length<a.value&&(s=this._getOrReturnCtx(e,s),w(s,{code:v.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="max")e.data.length>a.value&&(s=this._getOrReturnCtx(e,s),w(s,{code:v.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="length"){const i=e.data.length>a.value,o=e.data.length<a.value;(i||o)&&(s=this._getOrReturnCtx(e,s),i?w(s,{code:v.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}):o&&w(s,{code:v.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}),r.dirty())}else if(a.kind==="email")Gi.test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"email",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="emoji")Xn||(Xn=new RegExp(zi,"u")),Xn.test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"emoji",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="uuid")Li.test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"uuid",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="nanoid")Ui.test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"nanoid",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid")Mi.test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"cuid",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid2")$i.test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"cuid2",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="ulid")Fi.test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"ulid",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="url")try{new URL(e.data)}catch{s=this._getOrReturnCtx(e,s),w(s,{validation:"url",code:v.invalid_string,message:a.message}),r.dirty()}else a.kind==="regex"?(a.regex.lastIndex=0,a.regex.test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"regex",code:v.invalid_string,message:a.message}),r.dirty())):a.kind==="trim"?e.data=e.data.trim():a.kind==="includes"?e.data.includes(a.value,a.position)||(s=this._getOrReturnCtx(e,s),w(s,{code:v.invalid_string,validation:{includes:a.value,position:a.position},message:a.message}),r.dirty()):a.kind==="toLowerCase"?e.data=e.data.toLowerCase():a.kind==="toUpperCase"?e.data=e.data.toUpperCase():a.kind==="startsWith"?e.data.startsWith(a.value)||(s=this._getOrReturnCtx(e,s),w(s,{code:v.invalid_string,validation:{startsWith:a.value},message:a.message}),r.dirty()):a.kind==="endsWith"?e.data.endsWith(a.value)||(s=this._getOrReturnCtx(e,s),w(s,{code:v.invalid_string,validation:{endsWith:a.value},message:a.message}),r.dirty()):a.kind==="datetime"?eo(a).test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{code:v.invalid_string,validation:"datetime",message:a.message}),r.dirty()):a.kind==="date"?Qi.test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{code:v.invalid_string,validation:"date",message:a.message}),r.dirty()):a.kind==="time"?Ki(a).test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{code:v.invalid_string,validation:"time",message:a.message}),r.dirty()):a.kind==="duration"?Bi.test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"duration",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="ip"?to(e.data,a.version)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"ip",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="jwt"?no(e.data,a.alg)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"jwt",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="cidr"?ro(e.data,a.version)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"cidr",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="base64"?Yi.test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"base64",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="base64url"?Xi.test(e.data)||(s=this._getOrReturnCtx(e,s),w(s,{validation:"base64url",code:v.invalid_string,message:a.message}),r.dirty()):M.assertNever(a);return{status:r.value,value:e.data}}_regex(e,t,r){return this.refinement(s=>e.test(s),{validation:t,code:v.invalid_string,...T.errToObj(r)})}_addCheck(e){return new Ae({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...T.errToObj(e)})}url(e){return this._addCheck({kind:"url",...T.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...T.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...T.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...T.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...T.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...T.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...T.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...T.errToObj(e)})}base64url(e){return this._addCheck({kind:"base64url",...T.errToObj(e)})}jwt(e){return this._addCheck({kind:"jwt",...T.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...T.errToObj(e)})}cidr(e){return this._addCheck({kind:"cidr",...T.errToObj(e)})}datetime(e){return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,offset:(e==null?void 0:e.offset)??!1,local:(e==null?void 0:e.local)??!1,...T.errToObj(e==null?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,...T.errToObj(e==null?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...T.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...T.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t==null?void 0:t.position,...T.errToObj(t==null?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...T.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...T.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...T.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...T.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...T.errToObj(t)})}nonempty(e){return this.min(1,T.errToObj(e))}trim(){return new Ae({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new Ae({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new Ae({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isCIDR(){return!!this._def.checks.find(e=>e.kind==="cidr")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get isBase64url(){return!!this._def.checks.find(e=>e.kind==="base64url")}get minLength(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Ae.create=n=>new Ae({checks:[],typeName:O.ZodString,coerce:(n==null?void 0:n.coerce)??!1,...R(n)});function so(n,e){const t=(n.toString().split(".")[1]||"").length,r=(e.toString().split(".")[1]||"").length,s=t>r?t:r,a=Number.parseInt(n.toFixed(s).replace(".","")),i=Number.parseInt(e.toFixed(s).replace(".",""));return a%i/10**s}class lt extends j{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==x.number){const a=this._getOrReturnCtx(e);return w(a,{code:v.invalid_type,expected:x.number,received:a.parsedType}),C}let r;const s=new ae;for(const a of this._def.checks)a.kind==="int"?M.isInteger(e.data)||(r=this._getOrReturnCtx(e,r),w(r,{code:v.invalid_type,expected:"integer",received:"float",message:a.message}),s.dirty()):a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),w(r,{code:v.too_small,minimum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),w(r,{code:v.too_big,maximum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="multipleOf"?so(e.data,a.value)!==0&&(r=this._getOrReturnCtx(e,r),w(r,{code:v.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):a.kind==="finite"?Number.isFinite(e.data)||(r=this._getOrReturnCtx(e,r),w(r,{code:v.not_finite,message:a.message}),s.dirty()):M.assertNever(a);return{status:s.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,T.toString(t))}gt(e,t){return this.setLimit("min",e,!1,T.toString(t))}lte(e,t){return this.setLimit("max",e,!0,T.toString(t))}lt(e,t){return this.setLimit("max",e,!1,T.toString(t))}setLimit(e,t,r,s){return new lt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:T.toString(s)}]})}_addCheck(e){return new lt({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:T.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:T.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:T.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:T.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:T.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:T.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:T.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:T.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:T.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&M.isInteger(e.value))}get isFinite(){let e=null,t=null;for(const r of this._def.checks){if(r.kind==="finite"||r.kind==="int"||r.kind==="multipleOf")return!0;r.kind==="min"?(t===null||r.value>t)&&(t=r.value):r.kind==="max"&&(e===null||r.value<e)&&(e=r.value)}return Number.isFinite(t)&&Number.isFinite(e)}}lt.create=n=>new lt({checks:[],typeName:O.ZodNumber,coerce:(n==null?void 0:n.coerce)||!1,...R(n)});class Nt extends j{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce)try{e.data=BigInt(e.data)}catch{return this._getInvalidInput(e)}if(this._getType(e)!==x.bigint)return this._getInvalidInput(e);let r;const s=new ae;for(const a of this._def.checks)a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),w(r,{code:v.too_small,type:"bigint",minimum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),w(r,{code:v.too_big,type:"bigint",maximum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="multipleOf"?e.data%a.value!==BigInt(0)&&(r=this._getOrReturnCtx(e,r),w(r,{code:v.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):M.assertNever(a);return{status:s.value,value:e.data}}_getInvalidInput(e){const t=this._getOrReturnCtx(e);return w(t,{code:v.invalid_type,expected:x.bigint,received:t.parsedType}),C}gte(e,t){return this.setLimit("min",e,!0,T.toString(t))}gt(e,t){return this.setLimit("min",e,!1,T.toString(t))}lte(e,t){return this.setLimit("max",e,!0,T.toString(t))}lt(e,t){return this.setLimit("max",e,!1,T.toString(t))}setLimit(e,t,r,s){return new Nt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:T.toString(s)}]})}_addCheck(e){return new Nt({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:T.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:T.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:T.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:T.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:T.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Nt.create=n=>new Nt({checks:[],typeName:O.ZodBigInt,coerce:(n==null?void 0:n.coerce)??!1,...R(n)});class Qn extends j{_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==x.boolean){const r=this._getOrReturnCtx(e);return w(r,{code:v.invalid_type,expected:x.boolean,received:r.parsedType}),C}return me(e.data)}}Qn.create=n=>new Qn({typeName:O.ZodBoolean,coerce:(n==null?void 0:n.coerce)||!1,...R(n)});class _n extends j{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==x.date){const a=this._getOrReturnCtx(e);return w(a,{code:v.invalid_type,expected:x.date,received:a.parsedType}),C}if(Number.isNaN(e.data.getTime())){const a=this._getOrReturnCtx(e);return w(a,{code:v.invalid_date}),C}const r=new ae;let s;for(const a of this._def.checks)a.kind==="min"?e.data.getTime()<a.value&&(s=this._getOrReturnCtx(e,s),w(s,{code:v.too_small,message:a.message,inclusive:!0,exact:!1,minimum:a.value,type:"date"}),r.dirty()):a.kind==="max"?e.data.getTime()>a.value&&(s=this._getOrReturnCtx(e,s),w(s,{code:v.too_big,message:a.message,inclusive:!0,exact:!1,maximum:a.value,type:"date"}),r.dirty()):M.assertNever(a);return{status:r.value,value:new Date(e.data.getTime())}}_addCheck(e){return new _n({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:T.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:T.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}}_n.create=n=>new _n({checks:[],coerce:(n==null?void 0:n.coerce)||!1,typeName:O.ZodDate,...R(n)});class ps extends j{_parse(e){if(this._getType(e)!==x.symbol){const r=this._getOrReturnCtx(e);return w(r,{code:v.invalid_type,expected:x.symbol,received:r.parsedType}),C}return me(e.data)}}ps.create=n=>new ps({typeName:O.ZodSymbol,...R(n)});class Kn extends j{_parse(e){if(this._getType(e)!==x.undefined){const r=this._getOrReturnCtx(e);return w(r,{code:v.invalid_type,expected:x.undefined,received:r.parsedType}),C}return me(e.data)}}Kn.create=n=>new Kn({typeName:O.ZodUndefined,...R(n)});class er extends j{_parse(e){if(this._getType(e)!==x.null){const r=this._getOrReturnCtx(e);return w(r,{code:v.invalid_type,expected:x.null,received:r.parsedType}),C}return me(e.data)}}er.create=n=>new er({typeName:O.ZodNull,...R(n)});class tr extends j{constructor(){super(...arguments),this._any=!0}_parse(e){return me(e.data)}}tr.create=n=>new tr({typeName:O.ZodAny,...R(n)});class fs extends j{constructor(){super(...arguments),this._unknown=!0}_parse(e){return me(e.data)}}fs.create=n=>new fs({typeName:O.ZodUnknown,...R(n)});class $e extends j{_parse(e){const t=this._getOrReturnCtx(e);return w(t,{code:v.invalid_type,expected:x.never,received:t.parsedType}),C}}$e.create=n=>new $e({typeName:O.ZodNever,...R(n)});class hs extends j{_parse(e){if(this._getType(e)!==x.undefined){const r=this._getOrReturnCtx(e);return w(r,{code:v.invalid_type,expected:x.void,received:r.parsedType}),C}return me(e.data)}}hs.create=n=>new hs({typeName:O.ZodVoid,...R(n)});class be extends j{_parse(e){const{ctx:t,status:r}=this._processInputParams(e),s=this._def;if(t.parsedType!==x.array)return w(t,{code:v.invalid_type,expected:x.array,received:t.parsedType}),C;if(s.exactLength!==null){const i=t.data.length>s.exactLength.value,o=t.data.length<s.exactLength.value;(i||o)&&(w(t,{code:i?v.too_big:v.too_small,minimum:o?s.exactLength.value:void 0,maximum:i?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),r.dirty())}if(s.minLength!==null&&t.data.length<s.minLength.value&&(w(t,{code:v.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),r.dirty()),s.maxLength!==null&&t.data.length>s.maxLength.value&&(w(t,{code:v.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),r.dirty()),t.common.async)return Promise.all([...t.data].map((i,o)=>s.type._parseAsync(new we(t,i,t.path,o)))).then(i=>ae.mergeArray(r,i));const a=[...t.data].map((i,o)=>s.type._parseSync(new we(t,i,t.path,o)));return ae.mergeArray(r,a)}get element(){return this._def.type}min(e,t){return new be({...this._def,minLength:{value:e,message:T.toString(t)}})}max(e,t){return new be({...this._def,maxLength:{value:e,message:T.toString(t)}})}length(e,t){return new be({...this._def,exactLength:{value:e,message:T.toString(t)}})}nonempty(e){return this.min(1,e)}}be.create=(n,e)=>new be({type:n,minLength:null,maxLength:null,exactLength:null,typeName:O.ZodArray,...R(e)});function pt(n){if(n instanceof X){const e={};for(const t in n.shape){const r=n.shape[t];e[t]=Oe.create(pt(r))}return new X({...n._def,shape:()=>e})}else return n instanceof be?new be({...n._def,type:pt(n.element)}):n instanceof Oe?Oe.create(pt(n.unwrap())):n instanceof Xe?Xe.create(pt(n.unwrap())):n instanceof We?We.create(n.items.map(e=>pt(e))):n}class X extends j{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),t=M.objectKeys(e);return this._cached={shape:e,keys:t},this._cached}_parse(e){if(this._getType(e)!==x.object){const p=this._getOrReturnCtx(e);return w(p,{code:v.invalid_type,expected:x.object,received:p.parsedType}),C}const{status:r,ctx:s}=this._processInputParams(e),{shape:a,keys:i}=this._getCached(),o=[];if(!(this._def.catchall instanceof $e&&this._def.unknownKeys==="strip"))for(const p in s.data)i.includes(p)||o.push(p);const c=[];for(const p of i){const l=a[p],h=s.data[p];c.push({key:{status:"valid",value:p},value:l._parse(new we(s,h,s.path,p)),alwaysSet:p in s.data})}if(this._def.catchall instanceof $e){const p=this._def.unknownKeys;if(p==="passthrough")for(const l of o)c.push({key:{status:"valid",value:l},value:{status:"valid",value:s.data[l]}});else if(p==="strict")o.length>0&&(w(s,{code:v.unrecognized_keys,keys:o}),r.dirty());else if(p!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const p=this._def.catchall;for(const l of o){const h=s.data[l];c.push({key:{status:"valid",value:l},value:p._parse(new we(s,h,s.path,l)),alwaysSet:l in s.data})}}return s.common.async?Promise.resolve().then(async()=>{const p=[];for(const l of c){const h=await l.key,f=await l.value;p.push({key:h,value:f,alwaysSet:l.alwaysSet})}return p}).then(p=>ae.mergeObjectSync(r,p)):ae.mergeObjectSync(r,c)}get shape(){return this._def.shape()}strict(e){return T.errToObj,new X({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,r)=>{var a,i;const s=((i=(a=this._def).errorMap)==null?void 0:i.call(a,t,r).message)??r.defaultError;return t.code==="unrecognized_keys"?{message:T.errToObj(e).message??s}:{message:s}}}:{}})}strip(){return new X({...this._def,unknownKeys:"strip"})}passthrough(){return new X({...this._def,unknownKeys:"passthrough"})}extend(e){return new X({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new X({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:O.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new X({...this._def,catchall:e})}pick(e){const t={};for(const r of M.objectKeys(e))e[r]&&this.shape[r]&&(t[r]=this.shape[r]);return new X({...this._def,shape:()=>t})}omit(e){const t={};for(const r of M.objectKeys(this.shape))e[r]||(t[r]=this.shape[r]);return new X({...this._def,shape:()=>t})}deepPartial(){return pt(this)}partial(e){const t={};for(const r of M.objectKeys(this.shape)){const s=this.shape[r];e&&!e[r]?t[r]=s:t[r]=s.optional()}return new X({...this._def,shape:()=>t})}required(e){const t={};for(const r of M.objectKeys(this.shape))if(e&&!e[r])t[r]=this.shape[r];else{let a=this.shape[r];for(;a instanceof Oe;)a=a._def.innerType;t[r]=a}return new X({...this._def,shape:()=>t})}keyof(){return gs(M.objectKeys(this.shape))}}X.create=(n,e)=>new X({shape:()=>n,unknownKeys:"strip",catchall:$e.create(),typeName:O.ZodObject,...R(e)}),X.strictCreate=(n,e)=>new X({shape:()=>n,unknownKeys:"strict",catchall:$e.create(),typeName:O.ZodObject,...R(e)}),X.lazycreate=(n,e)=>new X({shape:n,unknownKeys:"strip",catchall:$e.create(),typeName:O.ZodObject,...R(e)});class yn extends j{_parse(e){const{ctx:t}=this._processInputParams(e),r=this._def.options;function s(a){for(const o of a)if(o.result.status==="valid")return o.result;for(const o of a)if(o.result.status==="dirty")return t.common.issues.push(...o.ctx.common.issues),o.result;const i=a.map(o=>new Ie(o.ctx.common.issues));return w(t,{code:v.invalid_union,unionErrors:i}),C}if(t.common.async)return Promise.all(r.map(async a=>{const i={...t,common:{...t.common,issues:[]},parent:null};return{result:await a._parseAsync({data:t.data,path:t.path,parent:i}),ctx:i}})).then(s);{let a;const i=[];for(const c of r){const p={...t,common:{...t.common,issues:[]},parent:null},l=c._parseSync({data:t.data,path:t.path,parent:p});if(l.status==="valid")return l;l.status==="dirty"&&!a&&(a={result:l,ctx:p}),p.common.issues.length&&i.push(p.common.issues)}if(a)return t.common.issues.push(...a.ctx.common.issues),a.result;const o=i.map(c=>new Ie(c));return w(t,{code:v.invalid_union,unionErrors:o}),C}}get options(){return this._def.options}}yn.create=(n,e)=>new yn({options:n,typeName:O.ZodUnion,...R(e)});const Ce=n=>n instanceof bn?Ce(n.schema):n instanceof Ye?Ce(n.innerType()):n instanceof xn?[n.value]:n instanceof He?n.options:n instanceof sr?M.objectValues(n.enum):n instanceof Tn?Ce(n._def.innerType):n instanceof Kn?[void 0]:n instanceof er?[null]:n instanceof Oe?[void 0,...Ce(n.unwrap())]:n instanceof Xe?[null,...Ce(n.unwrap())]:n instanceof ys||n instanceof In?Ce(n.unwrap()):n instanceof kn?Ce(n._def.innerType):[];class nr extends j{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==x.object)return w(t,{code:v.invalid_type,expected:x.object,received:t.parsedType}),C;const r=this.discriminator,s=t.data[r],a=this.optionsMap.get(s);return a?t.common.async?a._parseAsync({data:t.data,path:t.path,parent:t}):a._parseSync({data:t.data,path:t.path,parent:t}):(w(t,{code:v.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),C)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,r){const s=new Map;for(const a of t){const i=Ce(a.shape[e]);if(!i.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const o of i){if(s.has(o))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);s.set(o,a)}}return new nr({typeName:O.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:s,...R(r)})}}function rr(n,e){const t=Me(n),r=Me(e);if(n===e)return{valid:!0,data:n};if(t===x.object&&r===x.object){const s=M.objectKeys(e),a=M.objectKeys(n).filter(o=>s.indexOf(o)!==-1),i={...n,...e};for(const o of a){const c=rr(n[o],e[o]);if(!c.valid)return{valid:!1};i[o]=c.data}return{valid:!0,data:i}}else if(t===x.array&&r===x.array){if(n.length!==e.length)return{valid:!1};const s=[];for(let a=0;a<n.length;a++){const i=n[a],o=e[a],c=rr(i,o);if(!c.valid)return{valid:!1};s.push(c.data)}return{valid:!0,data:s}}else return t===x.date&&r===x.date&&+n==+e?{valid:!0,data:n}:{valid:!1}}class vn extends j{_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=(a,i)=>{if(os(a)||os(i))return C;const o=rr(a.value,i.value);return o.valid?((us(a)||us(i))&&t.dirty(),{status:t.value,value:o.data}):(w(r,{code:v.invalid_intersection_types}),C)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then(([a,i])=>s(a,i)):s(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}}vn.create=(n,e,t)=>new vn({left:n,right:e,typeName:O.ZodIntersection,...R(t)});class We extends j{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==x.array)return w(r,{code:v.invalid_type,expected:x.array,received:r.parsedType}),C;if(r.data.length<this._def.items.length)return w(r,{code:v.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),C;!this._def.rest&&r.data.length>this._def.items.length&&(w(r,{code:v.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const a=[...r.data].map((i,o)=>{const c=this._def.items[o]||this._def.rest;return c?c._parse(new we(r,i,r.path,o)):null}).filter(i=>!!i);return r.common.async?Promise.all(a).then(i=>ae.mergeArray(t,i)):ae.mergeArray(t,a)}get items(){return this._def.items}rest(e){return new We({...this._def,rest:e})}}We.create=(n,e)=>{if(!Array.isArray(n))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new We({items:n,typeName:O.ZodTuple,rest:null,...R(e)})};class wn extends j{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==x.object)return w(r,{code:v.invalid_type,expected:x.object,received:r.parsedType}),C;const s=[],a=this._def.keyType,i=this._def.valueType;for(const o in r.data)s.push({key:a._parse(new we(r,o,r.path,o)),value:i._parse(new we(r,r.data[o],r.path,o)),alwaysSet:o in r.data});return r.common.async?ae.mergeObjectAsync(t,s):ae.mergeObjectSync(t,s)}get element(){return this._def.valueType}static create(e,t,r){return t instanceof j?new wn({keyType:e,valueType:t,typeName:O.ZodRecord,...R(r)}):new wn({keyType:Ae.create(),valueType:e,typeName:O.ZodRecord,...R(t)})}}class ms extends j{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==x.map)return w(r,{code:v.invalid_type,expected:x.map,received:r.parsedType}),C;const s=this._def.keyType,a=this._def.valueType,i=[...r.data.entries()].map(([o,c],p)=>({key:s._parse(new we(r,o,r.path,[p,"key"])),value:a._parse(new we(r,c,r.path,[p,"value"]))}));if(r.common.async){const o=new Map;return Promise.resolve().then(async()=>{for(const c of i){const p=await c.key,l=await c.value;if(p.status==="aborted"||l.status==="aborted")return C;(p.status==="dirty"||l.status==="dirty")&&t.dirty(),o.set(p.value,l.value)}return{status:t.value,value:o}})}else{const o=new Map;for(const c of i){const p=c.key,l=c.value;if(p.status==="aborted"||l.status==="aborted")return C;(p.status==="dirty"||l.status==="dirty")&&t.dirty(),o.set(p.value,l.value)}return{status:t.value,value:o}}}}ms.create=(n,e,t)=>new ms({valueType:e,keyType:n,typeName:O.ZodMap,...R(t)});class Rt extends j{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==x.set)return w(r,{code:v.invalid_type,expected:x.set,received:r.parsedType}),C;const s=this._def;s.minSize!==null&&r.data.size<s.minSize.value&&(w(r,{code:v.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),t.dirty()),s.maxSize!==null&&r.data.size>s.maxSize.value&&(w(r,{code:v.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),t.dirty());const a=this._def.valueType;function i(c){const p=new Set;for(const l of c){if(l.status==="aborted")return C;l.status==="dirty"&&t.dirty(),p.add(l.value)}return{status:t.value,value:p}}const o=[...r.data.values()].map((c,p)=>a._parse(new we(r,c,r.path,p)));return r.common.async?Promise.all(o).then(c=>i(c)):i(o)}min(e,t){return new Rt({...this._def,minSize:{value:e,message:T.toString(t)}})}max(e,t){return new Rt({...this._def,maxSize:{value:e,message:T.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}Rt.create=(n,e)=>new Rt({valueType:n,minSize:null,maxSize:null,typeName:O.ZodSet,...R(e)});class bn extends j{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}bn.create=(n,e)=>new bn({getter:n,typeName:O.ZodLazy,...R(e)});class xn extends j{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return w(t,{received:t.data,code:v.invalid_literal,expected:this._def.value}),C}return{status:"valid",value:e.data}}get value(){return this._def.value}}xn.create=(n,e)=>new xn({value:n,typeName:O.ZodLiteral,...R(e)});function gs(n,e){return new He({values:n,typeName:O.ZodEnum,...R(e)})}class He extends j{_parse(e){if(typeof e.data!="string"){const t=this._getOrReturnCtx(e),r=this._def.values;return w(t,{expected:M.joinValues(r),received:t.parsedType,code:v.invalid_type}),C}if(this._cache||(this._cache=new Set(this._def.values)),!this._cache.has(e.data)){const t=this._getOrReturnCtx(e),r=this._def.values;return w(t,{received:t.data,code:v.invalid_enum_value,options:r}),C}return me(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return He.create(e,{...this._def,...t})}exclude(e,t=this._def){return He.create(this.options.filter(r=>!e.includes(r)),{...this._def,...t})}}He.create=gs;class sr extends j{_parse(e){const t=M.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==x.string&&r.parsedType!==x.number){const s=M.objectValues(t);return w(r,{expected:M.joinValues(s),received:r.parsedType,code:v.invalid_type}),C}if(this._cache||(this._cache=new Set(M.getValidEnumValues(this._def.values))),!this._cache.has(e.data)){const s=M.objectValues(t);return w(r,{received:r.data,code:v.invalid_enum_value,options:s}),C}return me(e.data)}get enum(){return this._def.values}}sr.create=(n,e)=>new sr({values:n,typeName:O.ZodNativeEnum,...R(e)});class Sn extends j{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==x.promise&&t.common.async===!1)return w(t,{code:v.invalid_type,expected:x.promise,received:t.parsedType}),C;const r=t.parsedType===x.promise?t.data:Promise.resolve(t.data);return me(r.then(s=>this._def.type.parseAsync(s,{path:t.path,errorMap:t.common.contextualErrorMap})))}}Sn.create=(n,e)=>new Sn({type:n,typeName:O.ZodPromise,...R(e)});class Ye extends j{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===O.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=this._def.effect||null,a={addIssue:i=>{w(r,i),i.fatal?t.abort():t.dirty()},get path(){return r.path}};if(a.addIssue=a.addIssue.bind(a),s.type==="preprocess"){const i=s.transform(r.data,a);if(r.common.async)return Promise.resolve(i).then(async o=>{if(t.value==="aborted")return C;const c=await this._def.schema._parseAsync({data:o,path:r.path,parent:r});return c.status==="aborted"?C:c.status==="dirty"||t.value==="dirty"?Et(c.value):c});{if(t.value==="aborted")return C;const o=this._def.schema._parseSync({data:i,path:r.path,parent:r});return o.status==="aborted"?C:o.status==="dirty"||t.value==="dirty"?Et(o.value):o}}if(s.type==="refinement"){const i=o=>{const c=s.refinement(o,a);if(r.common.async)return Promise.resolve(c);if(c instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return o};if(r.common.async===!1){const o=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return o.status==="aborted"?C:(o.status==="dirty"&&t.dirty(),i(o.value),{status:t.value,value:o.value})}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(o=>o.status==="aborted"?C:(o.status==="dirty"&&t.dirty(),i(o.value).then(()=>({status:t.value,value:o.value}))))}if(s.type==="transform")if(r.common.async===!1){const i=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!dt(i))return C;const o=s.transform(i.value,a);if(o instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:o}}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(i=>dt(i)?Promise.resolve(s.transform(i.value,a)).then(o=>({status:t.value,value:o})):C);M.assertNever(s)}}Ye.create=(n,e,t)=>new Ye({schema:n,typeName:O.ZodEffects,effect:e,...R(t)}),Ye.createWithPreprocess=(n,e,t)=>new Ye({schema:e,effect:{type:"preprocess",transform:n},typeName:O.ZodEffects,...R(t)});class Oe extends j{_parse(e){return this._getType(e)===x.undefined?me(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Oe.create=(n,e)=>new Oe({innerType:n,typeName:O.ZodOptional,...R(e)});class Xe extends j{_parse(e){return this._getType(e)===x.null?me(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Xe.create=(n,e)=>new Xe({innerType:n,typeName:O.ZodNullable,...R(e)});class Tn extends j{_parse(e){const{ctx:t}=this._processInputParams(e);let r=t.data;return t.parsedType===x.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}Tn.create=(n,e)=>new Tn({innerType:n,typeName:O.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...R(e)});class kn extends j{_parse(e){const{ctx:t}=this._processInputParams(e),r={...t,common:{...t.common,issues:[]}},s=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return gn(s)?s.then(a=>({status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new Ie(r.common.issues)},input:r.data})})):{status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new Ie(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}}kn.create=(n,e)=>new kn({innerType:n,typeName:O.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...R(e)});class _s extends j{_parse(e){if(this._getType(e)!==x.nan){const r=this._getOrReturnCtx(e);return w(r,{code:v.invalid_type,expected:x.nan,received:r.parsedType}),C}return{status:"valid",value:e.data}}}_s.create=n=>new _s({typeName:O.ZodNaN,...R(n)});class ys extends j{_parse(e){const{ctx:t}=this._processInputParams(e),r=t.data;return this._def.type._parse({data:r,path:t.path,parent:t})}unwrap(){return this._def.type}}class ar extends j{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.common.async)return(async()=>{const a=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return a.status==="aborted"?C:a.status==="dirty"?(t.dirty(),Et(a.value)):this._def.out._parseAsync({data:a.value,path:r.path,parent:r})})();{const s=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return s.status==="aborted"?C:s.status==="dirty"?(t.dirty(),{status:"dirty",value:s.value}):this._def.out._parseSync({data:s.value,path:r.path,parent:r})}}static create(e,t){return new ar({in:e,out:t,typeName:O.ZodPipeline})}}class In extends j{_parse(e){const t=this._def.innerType._parse(e),r=s=>(dt(s)&&(s.value=Object.freeze(s.value)),s);return gn(t)?t.then(s=>r(s)):r(t)}unwrap(){return this._def.innerType}}In.create=(n,e)=>new In({innerType:n,typeName:O.ZodReadonly,...R(e)});var O;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(O||(O={}));const d=Ae.create,k=lt.create,Dt=Qn.create,U=tr.create;$e.create;const G=be.create,g=X.create,vs=yn.create,de=nr.create;vn.create,We.create;const ie=wn.create,ao=bn.create,m=xn.create,oe=He.create;Sn.create,Oe.create,Xe.create,g({name:d(),description:d().optional(),inputSchema:g({type:m("object"),properties:ie(d(),U()),required:G(d()),additionalProperties:Dt()})});async function io(n,e=!1){const t=[],r=new Set;for(const s of n){const a=await oo(s,e),o=[...new Set(a.map(c=>c.name))].filter(c=>r.has(c));if(o.length>0)throw new Q(`Duplicate tool names found across MCP servers: ${o.join(", ")}`);for(const c of a)r.add(c.name),t.push(c)}return t}const ir={};async function oo(n,e){return n.cacheToolsList&&ir[n.name]?ir[n.name]:Po(async t=>{const r=await n.listTools();t.spanData.result=r.map(a=>a.name);const s=r.map(a=>co(a,n,e));return n.cacheToolsList&&(ir[n.name]=s),s},{data:{server:n.name}})}async function uo(n,e=!1){return io(n,e)}function co(n,e,t){var i,o,c,p;async function r(l,h){let f={};typeof l=="string"&&l?f=JSON.parse(l):typeof l=="object"&&l!=null&&(f=l);const b=jt();b&&(b.spanData.mcp_data={server:e.name});const A=await e.callTool(n.name,f);return A.length===1?A[0]:A}const s={type:((i=n.inputSchema)==null?void 0:i.type)??"object",properties:((o=n.inputSchema)==null?void 0:o.properties)??{},required:((c=n.inputSchema)==null?void 0:c.required)??[],additionalProperties:((p=n.inputSchema)==null?void 0:p.additionalProperties)??!1};if(t||s.additionalProperties===!0)try{const l=lo(s);return mn({name:n.name,description:n.description||"",parameters:l,strict:!0,execute:r})}catch(l){I.warn(`Error converting MCP schema to strict mode: ${l}`)}const a={...s,additionalProperties:!0};return mn({name:n.name,description:n.description||"",parameters:a,strict:!1,execute:r})}function lo(n){const e={...n,additionalProperties:!1};return e.required||(e.required=[]),e}function po(){return{}}class An{constructor(){S(this,gt,new EventTarget)}on(e,t){return u(this,gt).addEventListener(e,r=>t(...r.detail??[])),this}off(e,t){return u(this,gt).removeEventListener(e,r=>t(...r.detail??[])),this}emit(e,...t){const r=new CustomEvent(e,{detail:t});return u(this,gt).dispatchEvent(r)}once(e,t){const r=(...s)=>{this.off(e,r),t(...s)};return this.on(e,r),this}}gt=new WeakMap;const ws=crypto.randomUUID.bind(crypto),fo=class{constructor(){}pipeTo(e,t){}pipeThrough(e,t){}},ho=globalThis.ReadableStream,mo=globalThis.TransformStream;class go{constructor(){_(this,"context",null)}run(e,t){return this.context=e,t()}getStore(){return this.context}enterWith(e){this.context=e}}class _o{constructor(){}setTimeout(e,t){const r=setTimeout(e,t);return r.ref=typeof r.ref=="function"?r.ref:()=>r,r.unref=typeof r.unref=="function"?r.unref:()=>r,r.hasRef=typeof r.hasRef=="function"?r.hasRef:()=>!0,r.refresh=typeof r.refresh=="function"?r.refresh:()=>r,r}clearTimeout(e){window.clearTimeout(e)}}const yo=new _o;let bs;function xe(){return bs??(bs=new go),bs}function Pt(){const n=xe().getStore();return n!=null&&n.trace?n.trace:null}function jt(){const n=xe().getStore();return n!=null&&n.span?n.span:null}function xs(n){return async()=>{const e=Pt();if(!e)throw new Error("No trace found");await e.start();const t=await n(e);return await e.end(),t}}async function vo(n,e,t={}){const r=typeof n=="string"?Se().createTrace({...t,name:n}):n;return xe().run({trace:r},xs(e))}async function wo(n,e={}){if(Pt())return await n();const r=Se().createTrace(e);return xe().run({trace:r},xs(n))}function Cn(n){const e=xe().getStore();if(!e)throw new Error("No existing trace found");e.span&&(e.span.previousSpan=e.previousSpan,e.previousSpan=e.span),e.span=n,xe().enterWith(e)}function Zt(){var e;const n=xe().getStore();n&&(n.span=n.previousSpan,n.previousSpan=(e=n.previousSpan)==null?void 0:e.previousSpan,xe().enterWith(n))}function Mt(n){const e=jt();e&&e.setError(n)}function bo(n){var e,t,r;return{trace:(e=n.trace)==null?void 0:e.clone(),span:(t=n.span)==null?void 0:t.clone(),previousSpan:(r=n.previousSpan)==null?void 0:r.clone()}}function or(n){const e=xe().getStore();if(!e)throw new Error("No existing trace found");const t=bo(e);return xe().run(t,n)}class xo{async export(e){if(rs.disabled){I.debug("Tracing is disabled. Skipping export");return}for(const t of e)t.type==="trace"?console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}`):console.log(`[Exporter] Export span: ${JSON.stringify(t)}`)}}class So{constructor(e,{maxQueueSize:t=1e3,maxBatchSize:r=100,scheduleDelay:s=5e3,exportTriggerRatio:a=.8}={}){S(this,ue);S(this,Bt);S(this,_t);S(this,Gt);S(this,zt);S(this,yt);S(this,ne,[]);S(this,Re);S(this,Le,null);S(this,Ue,!1);S(this,vt,null);y(this,Bt,t),y(this,_t,r),y(this,Gt,s),y(this,zt,t*a),y(this,yt,e),y(this,Re,yo),I.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.")}start(){y(this,vt,new AbortController),Z(this,ue,Er).call(this)}async onTraceStart(e){await Z(this,ue,Or).call(this,e)}async onTraceEnd(e){}async onSpanStart(e){}async onSpanEnd(e){await Z(this,ue,Or).call(this,e)}async shutdown(e){var t;for(e&&u(this,Re).setTimeout(()=>{var r;(r=u(this,vt))==null||r.abort()},e),I.debug("Shutting down gracefully");u(this,ne).length>0;){if(I.debug(`Waiting for buffer to empty. Items left: ${u(this,ne).length}`),u(this,Ue)||await Z(this,ue,At).call(this,!0),(t=u(this,vt))!=null&&t.signal.aborted){I.debug("Timeout reached, force flushing"),await Z(this,ue,At).call(this,!0);break}await new Promise(r=>u(this,Re).setTimeout(r,500))}I.debug("Buffer empty. Exiting"),u(this,Re)&&u(this,Le)&&u(this,Re).clearTimeout(u(this,Le))}async forceFlush(){u(this,ne).length>0&&await Z(this,ue,At).call(this,!0)}}Bt=new WeakMap,_t=new WeakMap,Gt=new WeakMap,zt=new WeakMap,yt=new WeakMap,ne=new WeakMap,Re=new WeakMap,Le=new WeakMap,Ue=new WeakMap,vt=new WeakMap,ue=new WeakSet,Or=async function(e){if(u(this,ne).length+1>u(this,Bt)){I.error("Dropping trace because buffer is full");return}u(this,ne).push(e),u(this,ne).length>u(this,zt)&&await Z(this,ue,At).call(this)},Er=function(){y(this,Le,u(this,Re).setTimeout(async()=>{await Z(this,ue,At).call(this),Z(this,ue,Er).call(this)},u(this,Gt))),typeof u(this,Le).unref=="function"&&u(this,Le).unref()},At=async function(e=!1){if(u(this,ne).length!==0){if(I.debug(`Exporting batches. Force: ${e}. Buffer size: ${u(this,ne).length}`),e||u(this,ne).length<u(this,_t)){const t=[...u(this,ne)];y(this,ne,[]),y(this,Ue,!0),await u(this,yt).export(t),y(this,Ue,!1)}else if(u(this,ne).length>0){const t=u(this,ne).splice(0,u(this,_t));y(this,Ue,!0),await u(this,yt).export(t),y(this,Ue,!1)}}};class To{constructor(){S(this,le,[])}start(){for(const e of u(this,le))e.start&&e.start()}addTraceProcessor(e){u(this,le).push(e)}setProcessors(e){I.debug("Shutting down old processors");for(const t of u(this,le))t.shutdown();y(this,le,e)}async onTraceStart(e){for(const t of u(this,le))await t.onTraceStart(e)}async onTraceEnd(e){for(const t of u(this,le))await t.onTraceEnd(e)}async onSpanStart(e){for(const t of u(this,le))await t.onSpanStart(e)}async onSpanEnd(e){for(const t of u(this,le))await t.onSpanEnd(e)}async shutdown(e){for(const t of u(this,le))await t.shutdown(e)}async forceFlush(){for(const e of u(this,le))await e.forceFlush()}}le=new WeakMap;let ur=null,cr=null;function ko(){return ur||(ur=new xo),ur}function Ss(){return cr||(cr=new So(ko())),cr}function Ts(){return new Date().toISOString()}function ks(){return`trace_${ws().replace(/-/g,"")}`}function Io(){return`span_${ws().replace(/-/g,"").slice(0,24)}`}function Ao(n){return Object.fromEntries(Object.entries(n).filter(([e])=>!e.startsWith("_")))}const kr=class kr{constructor(e,t){_(this,"type","trace.span");S(this,Vt);S(this,qt);S(this,Wt);S(this,Ht);S(this,nt);S(this,Je);S(this,Be);S(this,rt);S(this,Yt);y(this,qt,e.traceId),y(this,Wt,e.spanId??Io()),y(this,Vt,e.data),y(this,nt,t),y(this,Ht,e.parentId??null),y(this,rt,e.error??null),y(this,Je,e.startedAt??null),y(this,Be,e.endedAt??null)}get traceId(){return u(this,qt)}get spanData(){return u(this,Vt)}get spanId(){return u(this,Wt)}get parentId(){return u(this,Ht)}get previousSpan(){return u(this,Yt)}set previousSpan(e){y(this,Yt,e)}start(){if(u(this,Je)){I.warn("Span already started");return}y(this,Je,Ts()),u(this,nt).onSpanStart(this)}end(){if(u(this,Be)){I.debug("Span already finished",this.spanData);return}y(this,Be,Ts()),u(this,nt).onSpanEnd(this)}setError(e){y(this,rt,e)}get error(){return u(this,rt)}get startedAt(){return u(this,Je)}get endedAt(){return u(this,Be)}clone(){var t;const e=new kr({traceId:this.traceId,spanId:this.spanId,parentId:this.parentId??void 0,data:this.spanData,startedAt:u(this,Je)??void 0,endedAt:u(this,Be)??void 0,error:u(this,rt)??void 0},u(this,nt));return e.previousSpan=(t=this.previousSpan)==null?void 0:t.clone(),e}toJSON(){return{object:this.type,id:this.spanId,trace_id:this.traceId,parent_id:this.parentId,started_at:this.startedAt,ended_at:this.endedAt,span_data:Ao(this.spanData),error:this.error}}};Vt=new WeakMap,qt=new WeakMap,Wt=new WeakMap,Ht=new WeakMap,nt=new WeakMap,Je=new WeakMap,Be=new WeakMap,rt=new WeakMap,Yt=new WeakMap;let $t=kr;class Fe extends $t{constructor(e,t){super({traceId:"no-op",spanId:"no-op",data:e},t)}start(){}end(){}setError(){}toJSON(){return null}}const Ir=class Ir{constructor(e,t){_(this,"type","trace");_(this,"traceId");_(this,"name");_(this,"groupId",null);_(this,"metadata");S(this,wt);S(this,De);this.traceId=e.traceId??ks(),this.name=e.name??"Agent workflow",this.groupId=e.groupId??null,this.metadata=e.metadata??{},y(this,wt,t??Ss()),y(this,De,e.started??!1)}async start(){u(this,De)||(y(this,De,!0),await u(this,wt).onTraceStart(this))}async end(){u(this,De)&&(y(this,De,!1),await u(this,wt).onTraceEnd(this))}clone(){return new Ir({traceId:this.traceId,name:this.name,groupId:this.groupId??void 0,metadata:this.metadata,started:u(this,De)})}toJSON(){return{object:this.type,id:this.traceId,workflow_name:this.name,group_id:this.groupId,metadata:this.metadata}}};wt=new WeakMap,De=new WeakMap;let Ft=Ir;class dr extends Ft{constructor(){super({})}async start(){}async end(){}toJSON(){return null}}class Co{constructor(){S(this,Fn);S(this,te);S(this,st);y(this,te,new To),y(this,st,rs.disabled),Z(this,Fn,wa).call(this)}registerProcessor(e){u(this,te).addTraceProcessor(e)}setProcessors(e){u(this,te).setProcessors(e)}getCurrentTrace(){return Pt()}getCurrentSpan(){return jt()}setDisabled(e){y(this,st,e)}startExportLoop(){u(this,te).start()}createTrace(e){if(u(this,st))return I.debug("Tracing is disabled, Not creating trace %o",e),new dr;const t=e.traceId??ks(),r=e.name??"Agent workflow";return I.debug("Creating trace %s with name %s",t,r),new Ft({...e,name:r,traceId:t},u(this,te))}createSpan(e,t){if(u(this,st)||e.disabled)return I.debug("Tracing is disabled, Not creating span %o",e),new Fe(e.data,u(this,te));let r,s;if(t){if(t instanceof Ft){if(t instanceof dr)return I.debug("Parent trace is no-op, returning NoopSpan"),new Fe(e.data,u(this,te));s=t.traceId}else if(t instanceof $t){if(t instanceof Fe)return I.debug("Parent span is no-op, returning NoopSpan"),new Fe(e.data,u(this,te));r=t.spanId,s=t.traceId}}else{const a=Pt(),i=jt();if(!a)return I.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Fe(e.data,u(this,te));if(i instanceof Fe||a instanceof dr)return I.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`),new Fe(e.data,u(this,te));s=a.traceId,i?(I.debug("Using parent span %s",i.spanId),r=i.spanId):I.debug("No parent span, using current trace %s",a.traceId)}return s?(I.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId??s}`),new $t({...e,traceId:s,parentId:r},u(this,te))):(I.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Fe(e.data,u(this,te)))}async shutdown(e){try{I.debug("Shutting down tracing provider"),await u(this,te).shutdown(e)}catch(t){I.error("Error shutting down tracing provider %o",t)}}async forceFlush(){await u(this,te).forceFlush()}}te=new WeakMap,st=new WeakMap,Fn=new WeakSet,wa=function(){if(typeof process<"u"&&typeof process.on=="function"){const e=async()=>{const t=setTimeout(()=>{console.warn("Cleanup timeout, forcing exit"),process.exit(1)},5e3);try{await this.shutdown()}finally{clearTimeout(t)}};process.on("beforeExit",e),process.on("SIGINT",async()=>{await e(),process.exit(130)}),process.on("SIGTERM",async()=>{await e(),process.exit(0)}),process.on("unhandledRejection",async(t,r)=>{I.error("Unhandled rejection",t,r),await e(),process.exit(1)})}};let lr;function Se(){return lr||(lr=new Co),lr}function On(n){return async(e,...t)=>or(async()=>{const r=n(...t);Cn(r);try{return r.start(),await e(r)}catch(s){throw r.setError({message:s.message,data:s.data}),s}finally{r.end(),Zt()}})}function Is(n,e){var t;return Se().createSpan({...n,data:{type:"agent",name:((t=n==null?void 0:n.data)==null?void 0:t.name)??"Agent",...n==null?void 0:n.data}},e)}function Oo(n,e){var t,r;return Se().createSpan({...n,data:{type:"function",input:((t=n==null?void 0:n.data)==null?void 0:t.input)??"",output:((r=n==null?void 0:n.data)==null?void 0:r.output)??"",...n==null?void 0:n.data}},e)}const As=On(Oo);function Eo(n,e){return Se().createSpan({...n,data:{type:"handoff",...n==null?void 0:n.data}},e)}const No=On(Eo);function Ro(n,e){return Se().createSpan({...n,data:{type:"guardrail",triggered:!1,...n==null?void 0:n.data}},e)}const Cs=On(Ro);function Do(n,e){return Se().createSpan({...n,data:{type:"mcp_tools",...n==null?void 0:n.data}},e)}const Po=On(Do);function jo(n){Se().registerProcessor(n)}class pr{on(e,t){return this.eventEmitter.on(e,t),this.eventEmitter}off(e,t){return this.eventEmitter.off(e,t),this.eventEmitter}emit(e,...t){return this.eventEmitter.emit(e,...t)}once(e,t){return this.eventEmitter.once(e,t),this.eventEmitter}}class Zo extends pr{constructor(){super(...arguments);_(this,"eventEmitter",new An)}}class Mo extends pr{constructor(){super(...arguments);_(this,"eventEmitter",new An)}}function Os({name:n,execute:e}){return{type:"input",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"input",name:n},output:await e(t)}}}}function fr({name:n,execute:e}){return{type:"output",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"output",name:n},agent:t.agent,agentOutput:t.agentOutput,output:await e(t)}}}}function Es(n){return JSON.stringify({assistant:n.name})}function $o(n){return`transfer_to_${fn(n.name)}`}function Fo(n){return`Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription??""}`}class Ns{constructor(e,t){_(this,"toolName");_(this,"toolDescription");_(this,"inputJsonSchema",{type:"object",properties:{},required:[],additionalProperties:!1});_(this,"strictJsonSchema",!0);_(this,"onInvokeHandoff");_(this,"agentName");_(this,"inputFilter");_(this,"agent");this.agentName=e.name,this.onInvokeHandoff=t,this.toolName=$o(e),this.toolDescription=Fo(e),this.agent=e}getHandoffAsFunctionTool(){return{type:"function",name:this.toolName,description:this.toolDescription,parameters:this.inputJsonSchema,strict:this.strictJsonSchema}}}function Rs(n,e={}){let t;const r=!!e.onHandoff,s=!!e.inputType;if(!(r===s))throw new Q("You must provide either both `onHandoff` and `inputType` or neither.");async function i(c,p){var l;if(t){if(!p)throw Mt({message:`Handoff function expected non empty input but got: ${p}`,data:{details:"input is empty"}}),new he("Handoff function expected non empty input");try{const h=await t(p);e.onHandoff&&await e.onHandoff(c,h)}catch(h){throw Mt({message:"Invalid JSON provided",data:{}}),I.dontLogToolData||I.error(`Invalid JSON when parsing: ${p}. Error: ${h}`),new he("Invalid JSON provided")}}else await((l=e.onHandoff)==null?void 0:l.call(e,c));return n}const o=new Ns(n,i);if(e.inputType){const c=qn(e.inputType,o.toolName);o.inputJsonSchema=c.schema,o.strictJsonSchema=!0,t=c.parser}return e.toolNameOverride&&(o.toolName=e.toolNameOverride),e.toolDescriptionOverride&&(o.toolDescription=e.toolDescriptionOverride),e.inputFilter&&(o.inputFilter=e.inputFilter),o}function En(n){return n instanceof Ns?n:Rs(n)}function Lo(){throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.")}const ee=g({providerData:ie(d(),U()).optional()}),Qe=ee.extend({id:d().optional()}),Uo=ee.extend({type:m("refusal"),refusal:d()}),Jo=ee.extend({type:m("output_text"),text:d()}),hr=ee.extend({type:m("input_text"),text:d()}),Bo=ee.extend({type:m("input_image"),image:d().or(g({id:d()})).describe("Could be a URL, base64 or an object with a file ID.")}),Go=ee.extend({type:m("input_file"),file:d().or(g({id:d()})).describe("Contents of the file or an object with a file ID.")}),Ds=ee.extend({type:m("audio"),audio:d().or(g({id:d()})).describe("Base64 encoded audio data or file id"),format:d().nullable().optional(),transcript:d().nullable().optional()}),zo=ee.extend({type:m("image"),image:d().describe("Base64 encoded image data")}),Vo=ee.extend({type:m("text"),text:d()}),qo=ee.extend({type:m("image"),data:d().describe("Base64 encoded image data"),mediaType:d().describe("IANA media type of the image")}),Wo=ee.extend({type:m("computer_screenshot"),data:d().describe("Base64 encoded image data or URL")}),Ho=de("type",[g({type:m("screenshot")}),g({type:m("click"),x:k(),y:k(),button:oe(["left","right","wheel","back","forward"])}),g({type:m("double_click"),x:k(),y:k()}),g({type:m("scroll"),x:k(),y:k(),scroll_x:k(),scroll_y:k()}),g({type:m("type"),text:d()}),g({type:m("wait")}),g({type:m("move"),x:k(),y:k()}),g({type:m("keypress"),keys:G(d())}),g({type:m("drag"),path:G(g({x:k(),y:k()}))})]),Yo=de("type",[Jo,Uo,hr,Ds,zo]),mr=Qe.extend({type:m("message").optional()}),Nn=mr.extend({role:m("assistant"),status:oe(["in_progress","completed","incomplete"]),content:G(Yo)}),Xo=de("type",[hr,Bo,Go,Ds]),Ps=mr.extend({role:m("user"),content:G(Xo).or(d())}),js=mr.extend({role:m("system"),content:d()});de("role",[js,Nn,Ps]);const Rn=Qe.extend({type:m("hosted_tool_call"),name:d().describe("The name of the hosted tool"),status:d().optional(),output:d().optional()}),Lt=Qe.extend({type:m("function_call"),callId:d().describe("The ID of the tool call"),name:d().describe("The name of the function"),status:oe(["in_progress","completed","incomplete"]).optional(),arguments:d()}),gr=Qe.extend({type:m("function_call_result"),name:d().describe("The name of the tool"),callId:d().describe("The ID of the tool call"),status:oe(["in_progress","completed","incomplete"]),output:de("type",[Vo,qo])}),_r=Qe.extend({type:m("computer_call"),callId:d().describe("The ID of the computer call"),status:oe(["in_progress","completed","incomplete"]),action:Ho}),Qo=Qe.extend({type:m("computer_call_result"),callId:d().describe("The ID of the computer call"),output:Wo}),Ko=de("type",[_r,Lt,Rn]),yr=ee.extend({id:d().optional(),type:m("reasoning"),content:G(hr)}),Zs=Qe.extend({type:m("unknown")}),vr=de("type",[Nn,Rn,Lt,_r,yr,Zs]),eu=vs([Ps,Nn,js,Rn,Lt,_r,gr,Qo,yr,Zs]),tu=g({requests:k().optional(),inputTokens:k(),outputTokens:k(),totalTokens:k(),inputTokensDetails:ie(d(),k()).optional(),outputTokensDetails:ie(d(),k()).optional()}),Ms=ee.extend({type:m("output_text_delta"),delta:d()}),nu=ee.extend({type:m("response_started")}),$s=ee.extend({type:m("response_done"),response:ee.extend({id:d(),usage:tu,output:G(vr)})}),ru=ee.extend({type:m("model"),event:U().describe("The event from the model")});de("type",[Ms,$s,nu,ru]);class Dn{constructor(e){_(this,"requests");_(this,"inputTokens");_(this,"outputTokens");_(this,"totalTokens");_(this,"inputTokensDetails",[]);_(this,"outputTokensDetails",[]);typeof e>"u"?(this.requests=0,this.inputTokens=0,this.outputTokens=0,this.totalTokens=0,this.inputTokensDetails=[],this.outputTokensDetails=[]):(this.requests=(e==null?void 0:e.requests)??1,this.inputTokens=(e==null?void 0:e.inputTokens)??0,this.outputTokens=(e==null?void 0:e.outputTokens)??0,this.totalTokens=(e==null?void 0:e.totalTokens)??0,this.inputTokensDetails=e!=null&&e.inputTokensDetails?[e.inputTokensDetails]:[],this.outputTokensDetails=e!=null&&e.outputTokensDetails?[e.outputTokensDetails]:[])}add(e){this.requests+=e.requests,this.inputTokens+=e.inputTokens,this.outputTokens+=e.outputTokens,this.totalTokens+=e.totalTokens,this.inputTokensDetails.push(...e.inputTokensDetails),this.outputTokensDetails.push(...e.outputTokensDetails)}}class ft{constructor(e={}){_(this,"context");_(this,"usage");S(this,pe);this.context=e,this.usage=new Dn,y(this,pe,new Map)}_rebuildApprovals(e){y(this,pe,new Map(Object.entries(e)))}isToolApproved({toolName:e,callId:t}){const r=u(this,pe).get(e);if((r==null?void 0:r.approved)===!0&&r.rejected===!0)return I.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"),!0;if((r==null?void 0:r.approved)===!0)return!0;if((r==null?void 0:r.rejected)===!0)return!1;const s=Array.isArray(r==null?void 0:r.approved)?r.approved.includes(t):!1,a=Array.isArray(r==null?void 0:r.rejected)?r.rejected.includes(t):!1;if(s&&a)return I.warn(`Tool call ${t} is both approved and rejected at the same time. Approval takes precedence`),!0;if(s)return!0;if(a)return!1}approveTool(e,{alwaysApprove:t=!1}={}){const r=e.rawItem.name;if(t){u(this,pe).set(r,{approved:!0,rejected:[]});return}const s=u(this,pe).get(r)??{approved:[],rejected:[]};Array.isArray(s.approved)&&s.approved.push(e.rawItem.callId),u(this,pe).set(r,s)}rejectTool(e,{alwaysReject:t=!1}={}){const r=e.rawItem.name;if(t){u(this,pe).set(r,{approved:!1,rejected:!0});return}const s=u(this,pe).get(r)??{approved:[],rejected:[]};Array.isArray(s.rejected)&&s.rejected.push(e.rawItem.callId),u(this,pe).set(r,s)}toJSON(){return{context:this.context,usage:this.usage,approvals:Object.fromEntries(u(this,pe).entries())}}}pe=new WeakMap;class Fs{constructor(e){_(this,"state");this.state=e}get history(){return $n(this.input,this.newItems)}get output(){return $n([],this.newItems)}get input(){return this.state._originalInput}get newItems(){return this.state._generatedItems}get rawResponses(){return this.state._modelResponses}get lastResponseId(){const e=this.rawResponses;return e&&e.length>0?e[e.length-1].responseId:void 0}get lastAgent(){return this.state._currentAgent}get inputGuardrailResults(){return this.state._inputGuardrailResults}get outputGuardrailResults(){return this.state._outputGuardrailResults}get interruptions(){var e;return((e=this.state._currentStep)==null?void 0:e.type)==="next_step_interruption"?this.state._currentStep.data.interruptions:[]}get finalOutput(){var e;if(((e=this.state._currentStep)==null?void 0:e.type)==="next_step_final_output")return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);I.warn("Accessed finalOutput before agent run is completed.")}}class Ls extends Fs{constructor(e){super(e)}}class su extends Fs{constructor(t={}){super(t.state);_(this,"currentTurn",0);_(this,"maxTurns");S(this,Xt,null);S(this,bt);S(this,ve);S(this,Ge);S(this,Qt);S(this,Kt);S(this,en);S(this,tn,!1);y(this,bt,t.signal),u(this,bt)&&u(this,bt).addEventListener("abort",async()=>{await u(this,Ge).cancel()}),y(this,Ge,new ho({start:r=>{y(this,ve,r)},cancel:()=>{y(this,tn,!0)}})),y(this,Qt,new Promise((r,s)=>{y(this,Kt,r),y(this,en,s)}))}get currentAgent(){return this.lastAgent}_addItem(t){var r;this.cancelled||(r=u(this,ve))==null||r.enqueue(t)}_done(){var t;!this.cancelled&&u(this,ve)&&(u(this,ve).close(),y(this,ve,void 0),(t=u(this,Kt))==null||t.call(this))}_raiseError(t){var r;!this.cancelled&&u(this,ve)&&(u(this,ve).error(t),y(this,ve,void 0)),y(this,Xt,t),(r=u(this,en))==null||r.call(this,t)}get cancelled(){return u(this,tn)}toStream(){return u(this,Ge)}get completed(){return u(this,Qt)}get error(){return u(this,Xt)}toTextStream(t={}){const r=u(this,Ge).pipeThrough(new mo({transform(s,a){if(s.type==="raw_model_stream_event"&&s.data.type==="output_text_delta"){const i=Ms.parse(s.data);a.enqueue(i.delta)}}}));return t.compatibleWithNodeStreams?fo.fromWeb(r):r}[Symbol.asyncIterator](){return u(this,Ge)[Symbol.asyncIterator]()}}Xt=new WeakMap,bt=new WeakMap,ve=new WeakMap,Ge=new WeakMap,Qt=new WeakMap,Kt=new WeakMap,en=new WeakMap,tn=new WeakMap;function Us(n){return n.type==="function"?{type:"function",name:n.name,description:n.description,parameters:n.parameters,strict:n.strict}:n.type==="computer"?{type:"computer",name:n.name,environment:n.computer.environment,dimensions:n.computer.dimensions}:{type:"hosted_tool",name:n.name,providerData:n.providerData}}function Js(n){return{toolName:n.toolName,toolDescription:n.toolDescription,inputJsonSchema:n.inputJsonSchema,strictJsonSchema:n.strictJsonSchema}}class Ke{constructor(){_(this,"type","base_item");_(this,"rawItem")}toJSON(){return{type:this.type,rawItem:this.rawItem}}}class Pn extends Ke{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","message_output_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}get content(){let t="";for(const r of this.rawItem.content)r.type==="output_text"&&(t+=r.text);return t}}class Ut extends Ke{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class ht extends Ke{constructor(t,r,s){super();_(this,"rawItem");_(this,"agent");_(this,"output");_(this,"type","tool_call_output_item");this.rawItem=t,this.agent=r,this.output=s}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON(),output:qe(this.output)}}}class wr extends Ke{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","reasoning_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class br extends Ke{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","handoff_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class xr extends Ke{constructor(t,r,s){super();_(this,"rawItem");_(this,"sourceAgent");_(this,"targetAgent");_(this,"type","handoff_output_item");this.rawItem=t,this.sourceAgent=r,this.targetAgent=s}toJSON(){return{...super.toJSON(),sourceAgent:this.sourceAgent.toJSON(),targetAgent:this.targetAgent.toJSON()}}}class et extends Ke{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_approval_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}function Bs(n){if(n.type!=="message"||n.role!=="assistant")return;const e=n.content[n.content.length-1];if(e.type==="output_text")return e.text}function au(n){return n.output.length===0?"":Bs(n.output[n.output.length-1])||""}class iu{constructor(e){_(this,"data");_(this,"type","raw_model_stream_event");this.data=e}}class ou{constructor(e,t){_(this,"name");_(this,"item");_(this,"type","run_item_stream_event");this.name=e,this.item=t}}class uu{constructor(e){_(this,"agent");_(this,"type","agent_updated_stream_event");this.agent=e}}function Gs(n,e,t,r){const s=[],a=[],i=[],o=[],c=[],p=new Map(r.map(f=>[f.toolName,f])),l=new Map(t.filter(f=>f.type==="function").map(f=>[f.name,f])),h=t.find(f=>f.type==="computer");for(const f of n.output){if(f.type==="message")f.role==="assistant"&&s.push(new Pn(f,e));else if(f.type==="hosted_tool_call")s.push(new Ut(f,e)),c.push(f.name);else if(f.type==="reasoning")s.push(new wr(f,e));else if(f.type==="computer_call"){if(s.push(new Ut(f,e)),c.push("computer_use"),!h)throw Mt({message:"Model produced computer action without a computer tool.",data:{agent_name:e.name}}),new he("Model produced computer action without a computer tool.");o.push({toolCall:f,computer:h})}if(f.type!=="function_call")continue;c.push(f.name);const b=p.get(f.name);if(b)s.push(new br(f,e)),a.push({toolCall:f,handoff:b});else{const A=l.get(f.name);if(!A)throw Mt({message:`Tool ${f.name} not found in agent ${e.name}.`,data:{tool_name:f.name,agent_name:e.name}}),new he(`Tool ${f.name} not found in agent ${e.name}.`);s.push(new Ut(f,e)),i.push({toolCall:f,tool:A})}}return{newItems:s,handoffs:a,functions:i,computerActions:o,toolsUsed:c,hasToolsOrApprovalsToRun(){return a.length>0||i.length>0||o.length>0}}}const cu=de("type",[g({type:m("next_step_handoff"),newAgent:U()}),g({type:m("next_step_final_output"),output:d()}),g({type:m("next_step_run_again")}),g({type:m("next_step_interruption"),data:ie(d(),U())})]);class ye{constructor(e,t,r,s,a){_(this,"originalInput");_(this,"modelResponse");_(this,"preStepItems");_(this,"newStepItems");_(this,"nextStep");this.originalInput=e,this.modelResponse=t,this.preStepItems=r,this.newStepItems=s,this.nextStep=a}get generatedItems(){return this.preStepItems.concat(this.newStepItems)}}function zs(n,e,t){return n.resetToolChoice&&e.hasUsedTools(n)?{...t,toolChoice:void 0}:t}async function Vs(n,e,t,r,s,a,i){const o=t.filter(b=>!(b instanceof et)),c=t.filter(b=>b instanceof et).map(b=>b.rawItem.callId),p=s.functions.filter(b=>c.includes(b.toolCall.callId)),l=await Ws(n,p,a,i),h=l.map(b=>b.runItem),f=await Hs(n,l,i);return f.isFinalOutput?(a.emit("agent_end",i._context,n,f.finalOutput),n.emit("agent_end",i._context,f.finalOutput),new ye(e,r,o,h,{type:"next_step_final_output",output:f.finalOutput})):f.isInterrupted?new ye(e,r,o,h,{type:"next_step_interruption",data:{interruptions:f.interruptions}}):new ye(e,r,o,h,{type:"next_step_run_again"})}async function qs(n,e,t,r,s,a,i){const o=t;let c=s.newItems;const[p,l]=await Promise.all([Ws(n,s.functions,a,i),lu(n,s.computerActions,a,i._context)]);if(c=c.concat(p.map(A=>A.runItem)),c=c.concat(l),s.handoffs.length>0)return await pu(n,e,o,c,r,s.handoffs,a,i._context);const h=await Hs(n,p,i);if(h.isFinalOutput)return a.emit("agent_end",i._context,n,h.finalOutput),n.emit("agent_end",i._context,h.finalOutput),new ye(e,r,o,c,{type:"next_step_final_output",output:h.finalOutput});if(h.isInterrupted)return new ye(e,r,o,c,{type:"next_step_interruption",data:{interruptions:h.interruptions}});const f=c.filter(A=>A instanceof Pn),b=f.length>0?Bs(f[f.length-1].rawItem):void 0;if(!b)return new ye(e,r,o,c,{type:"next_step_run_again"});if(n.outputType==="text"&&!s.hasToolsOrApprovalsToRun())return new ye(e,r,o,c,{type:"next_step_final_output",output:b});if(n.outputType!=="text"&&b){const{parser:A}=qn(n.outputType,"final_output"),[q]=await Gn(()=>A(b));if(q)throw Mt({message:"Invalid output type",data:{error:String(q)}}),new he("Invalid output type");return new ye(e,r,o,c,{type:"next_step_final_output",output:b})}return new ye(e,r,o,c,{type:"next_step_run_again"})}function jn(n,e){return{type:"function_call_result",name:n.name,callId:n.callId,status:"completed",output:{type:"text",text:qe(e)}}}async function Ws(n,e,t,r){async function s(a){let i=a.toolCall.arguments;if(a.tool.parameters&&(Ve(a.tool.parameters)?i=a.tool.parameters.parse(i):i=JSON.parse(i)),await a.tool.needsApproval(r._context,i,a.toolCall.callId)){const c=r._context.isToolApproved({toolName:a.tool.name,callId:a.toolCall.callId});if(c===!1)return As(async p=>{const l="Tool execution was not approved.";return p.setError({message:l,data:{tool_name:a.tool.name,error:`Tool execution for ${a.toolCall.callId} was manually rejected by user.`}}),p.spanData.output=l,{type:"function_output",tool:a.tool,output:l,runItem:new ht(jn(a.toolCall,l),n,l)}},{data:{name:a.tool.name}});if(c!==!0)return{type:"function_approval",tool:a.tool,runItem:new et(a.toolCall,n)}}return As(async c=>{t.config.traceIncludeSensitiveData&&(c.spanData.input=a.toolCall.arguments);try{t.emit("agent_tool_start",r._context,n,a.tool),n.emit("agent_tool_start",r._context,a.tool);const p=await a.tool.invoke(r._context,a.toolCall.arguments),l=qe(p);return t.emit("agent_tool_end",r._context,n,a.tool,l),n.emit("agent_tool_end",r._context,a.tool,l),t.config.traceIncludeSensitiveData&&(c.spanData.output=l),{type:"function_output",tool:a.tool,output:p,runItem:new ht(jn(a.toolCall,p),n,p)}}catch(p){throw c.setError({message:"Error running tool",data:{tool_name:a.tool.name,error:String(p)}}),p}},{data:{name:a.tool.name}})}try{return await Promise.all(e.map(s))}catch(a){throw new xi(`Failed to run function tools: ${a}`,a,r)}}async function du(n,e){const t=e.action;let r;switch(t.type){case"click":await n.click(t.x,t.y,t.button);break;case"double_click":await n.doubleClick(t.x,t.y);break;case"drag":await n.drag(t.path.map(s=>[s.x,s.y]));break;case"keypress":await n.keypress(t.keys);break;case"move":await n.move(t.x,t.y);break;case"screenshot":r=await n.screenshot();break;case"scroll":await n.scroll(t.x,t.y,t.scroll_x,t.scroll_y);break;case"type":await n.type(t.text);break;case"wait":await n.wait();break}if(typeof r<"u"||typeof n.screenshot=="function"&&(r=await n.screenshot(),typeof r<"u"))return r;throw new Error("Computer does not implement screenshot()")}async function lu(n,e,t,r,s=void 0){const a=s??I,i=[];for(const o of e){const c=o.computer.computer,p=o.toolCall;t.emit("agent_tool_start",r,n,o.computer),typeof n.emit=="function"&&n.emit("agent_tool_start",r,o.computer);let l;try{l=await du(c,p)}catch(b){a.error("Failed to execute computer action:",b),l=""}t.emit("agent_tool_end",r,n,o.computer,l),typeof n.emit=="function"&&n.emit("agent_tool_end",r,o.computer,l);const h=l?`data:image/png;base64,${l}`:"",f={type:"computer_call_result",callId:p.callId,output:{type:"computer_screenshot",data:h}};i.push(new ht(f,n,h))}return i}async function pu(n,e,t,r,s,a,i,o){if(r=[...r],a.length===0)return I.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."),new ye(e,s,t,r,{type:"next_step_run_again"});if(a.length>1){const p="Multiple handoffs detected, ignorning this one.";for(let l=1;l<a.length;l++)r.push(new ht(jn(a[l].toolCall,p),n,p))}const c=a[0];return No(async p=>{const l=c.handoff,h=await l.onInvokeHandoff(o,c.toolCall.arguments);if(p.spanData.to_agent=h.name,a.length>1){const b=a.map(A=>A.handoff.agentName);p.setError({message:"Multiple handoffs requested",data:{requested_agents:b}})}r.push(new xr(jn(c.toolCall,Es(h)),n,h)),i.emit("agent_handoff",o,n,h),n.emit("agent_handoff",o,h);const f=l.inputFilter??i.config.handoffInputFilter;if(f){I.debug("Filtering inputs for handoff"),typeof f!="function"&&p.setError({message:"Invalid input filter",data:{details:"not callable"}});const b={inputHistory:Array.isArray(e)?[...e]:e,preHandoffItems:[...t],newItems:[...r]},A=f(b);e=A.inputHistory,t=A.preHandoffItems,r=A.newItems}return new ye(e,s,t,r,{type:"next_step_handoff",newAgent:h})},{data:{from_agent:n.name}})}const Zn={isFinalOutput:!1,isInterrupted:void 0};async function Hs(n,e,t){if(e.length===0)return Zn;const r=e.filter(i=>i.runItem instanceof et).map(i=>i.runItem);if(r.length>0)return{isFinalOutput:!1,isInterrupted:!0,interruptions:r};if(n.toolUseBehavior==="run_llm_again")return Zn;const s=e[0];if(n.toolUseBehavior==="stop_on_first_tool")return(s==null?void 0:s.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:qe(s.output)}:Zn;const a=n.toolUseBehavior;if(typeof a=="object"){const i=e.find(o=>a.stopAtToolNames.includes(o.tool.name));return(i==null?void 0:i.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:qe(i.output)}:Zn}if(typeof a=="function")return a(t._context,e);throw new Q(`Invalid toolUseBehavior: ${a}`,t)}function Ys(n,e){for(const t of e.newStepItems){let r;if(t instanceof Pn)r="message_output_created";else if(t instanceof br)r="handoff_requested";else if(t instanceof xr)r="handoff_occurred";else if(t instanceof Ut)r="tool_called";else if(t instanceof ht)r="tool_output";else if(t instanceof wr)r="reasoning_item_created";else if(t instanceof et)r="tool_approval_requested";else{I.warn("Unknown item type: ",t);continue}n._addItem(new ou(r,t))}}class Xs{constructor(){S(this,xt,new Map)}addToolUse(e,t){u(this,xt).set(e,t)}hasUsedTools(e){return u(this,xt).has(e)}toJSON(){return Object.fromEntries(Array.from(u(this,xt).entries()).map(([e,t])=>[e.name,t]))}}xt=new WeakMap;const Mn="1.0",fu=m(Mn),Te=g({name:d()}),Qs=g({object:m("trace.span"),id:d(),trace_id:d(),parent_id:d().nullable(),started_at:d().nullable(),ended_at:d().nullable(),error:g({message:d(),data:ie(d(),U()).optional()}).nullable(),span_data:ie(d(),U())}).extend({previous_span:ao(()=>Qs).optional()}),Ks=g({requests:k(),inputTokens:k(),outputTokens:k(),totalTokens:k()}),ea=g({usage:Ks,output:G(vr),responseId:d().optional()}),ta=de("type",[g({type:m("message_output_item"),rawItem:Nn,agent:Te}),g({type:m("tool_call_item"),rawItem:Ko.or(Rn),agent:Te}),g({type:m("tool_call_output_item"),rawItem:gr,agent:Te,output:d()}),g({type:m("reasoning_item"),rawItem:yr,agent:Te}),g({type:m("handoff_call_item"),rawItem:Lt,agent:Te}),g({type:m("handoff_output_item"),rawItem:gr,sourceAgent:Te,targetAgent:Te}),g({type:m("tool_approval_item"),rawItem:Lt,agent:Te})]),hu=g({object:m("trace"),id:d(),workflow_name:d(),group_id:d().nullable(),metadata:ie(d(),U())}),mu=g({newItems:G(ta),toolsUsed:G(d()),handoffs:G(g({toolCall:U(),handoff:U()})),functions:G(g({toolCall:U(),tool:U()})),computerActions:G(g({toolCall:U(),computer:U()}))}),na=g({tripwireTriggered:Dt(),outputInfo:U()}),gu=g({guardrail:g({type:m("input"),name:d()}),output:na}),_u=g({guardrail:g({type:m("output"),name:d()}),agentOutput:U(),agent:Te,output:na}),ra=g({$schemaVersion:fu,currentTurn:k(),currentAgent:Te,originalInput:d().or(G(eu)),modelResponses:G(ea),context:g({usage:Ks,approvals:ie(d(),g({approved:G(d()).or(Dt()),rejected:G(d()).or(Dt())})),context:ie(d(),U())}),toolUseTracker:ie(d(),G(d())),maxTurns:k(),currentAgentSpan:Qs.nullable().optional(),noActiveAgentRun:Dt(),inputGuardrailResults:G(gu),outputGuardrailResults:G(_u),currentStep:cu.optional(),lastModelResponse:ea.optional(),generatedItems:G(ta),lastProcessedResponse:mu.optional(),trace:hu.nullable()});class tt{constructor(e,t,r,s){_(this,"_currentTurn",0);_(this,"_currentAgent");_(this,"_originalInput");_(this,"_modelResponses");_(this,"_currentAgentSpan");_(this,"_context");_(this,"_toolUseTracker");_(this,"_generatedItems");_(this,"_maxTurns");_(this,"_noActiveAgentRun",!0);_(this,"_lastTurnResponse");_(this,"_inputGuardrailResults");_(this,"_outputGuardrailResults");_(this,"_currentStep");_(this,"_lastProcessedResponse");_(this,"_trace",null);this._context=e,this._originalInput=structuredClone(t),this._modelResponses=[],this._currentAgentSpan=void 0,this._currentAgent=r,this._toolUseTracker=new Xs,this._generatedItems=[],this._maxTurns=s,this._inputGuardrailResults=[],this._outputGuardrailResults=[],this._trace=Pt()}approve(e,t={alwaysApprove:!1}){this._context.approveTool(e,t)}reject(e,t={alwaysReject:!1}){this._context.rejectTool(e,t)}toJSON(){var r;const e={$schemaVersion:Mn,currentTurn:this._currentTurn,currentAgent:{name:this._currentAgent.name},originalInput:this._originalInput,modelResponses:this._modelResponses.map(s=>({usage:{requests:s.usage.requests,inputTokens:s.usage.inputTokens,outputTokens:s.usage.outputTokens,totalTokens:s.usage.totalTokens},output:s.output,responseId:s.responseId})),context:this._context.toJSON(),toolUseTracker:this._toolUseTracker.toJSON(),maxTurns:this._maxTurns,currentAgentSpan:(r=this._currentAgentSpan)==null?void 0:r.toJSON(),noActiveAgentRun:this._noActiveAgentRun,inputGuardrailResults:this._inputGuardrailResults,outputGuardrailResults:this._outputGuardrailResults.map(s=>({...s,agent:s.agent.toJSON()})),currentStep:this._currentStep,lastModelResponse:this._lastTurnResponse,generatedItems:this._generatedItems.map(s=>s.toJSON()),lastProcessedResponse:this._lastProcessedResponse,trace:this._trace?this._trace.toJSON():null},t=ra.safeParse(e);if(!t.success)throw new bi(`Failed to serialize run state. ${t.error.message}`);return t.data}toString(){return JSON.stringify(this.toJSON())}static async fromString(e,t){var h,f,b,A,q;const[r,s]=await Gn(()=>JSON.parse(t));if(r)throw new Q(`Failed to parse run state. ${r instanceof Error?r.message:String(r)}`);const a=s.$schemaVersion;if(!a)throw new Q("Run state is missing schema version");if(a!==Mn)throw new Q(`Run state schema version ${a} is not supported. Please use version ${Mn}`);const i=ra.parse(JSON.parse(t)),o=yu(e),c=new ft(i.context.context);c._rebuildApprovals(i.context.approvals);const p=o.get(i.currentAgent.name);if(!p)throw new Q(`Agent ${i.currentAgent.name} not found`);const l=new tt(c,"",p,i.maxTurns);l._currentTurn=i.currentTurn,l._toolUseTracker=new Xs;for(const[$,J]of Object.entries(i.toolUseTracker))l._toolUseTracker.addToolUse(o.get($),J);if(i.currentAgentSpan){i.trace||I.warn("Trace is not set, skipping tracing setup");const $=Se().createTrace({traceId:(h=i.trace)==null?void 0:h.id,name:(f=i.trace)==null?void 0:f.workflow_name,groupId:((b=i.trace)==null?void 0:b.group_id)??void 0,metadata:(A=i.trace)==null?void 0:A.metadata});l._currentAgentSpan=sa($,i.currentAgentSpan),l._trace=$}return l._noActiveAgentRun=i.noActiveAgentRun,l._inputGuardrailResults=i.inputGuardrailResults,l._outputGuardrailResults=i.outputGuardrailResults.map($=>({...$,agent:o.get($.agent.name)})),l._currentStep=i.currentStep,l._originalInput=i.originalInput,l._modelResponses=i.modelResponses.map(aa),l._lastTurnResponse=i.lastModelResponse?aa(i.lastModelResponse):void 0,l._generatedItems=i.generatedItems.map($=>ia($,o)),l._lastProcessedResponse=i.lastProcessedResponse?await vu(o,l._currentAgent,i.lastProcessedResponse):void 0,((q=i.currentStep)==null?void 0:q.type)==="next_step_handoff"&&(l._currentStep={type:"next_step_handoff",newAgent:o.get(i.currentStep.newAgent.name)}),l}}function yu(n){const e=new Map,t=[n];for(;t.length>0;){const r=t.shift();if(!e.has(r.name)){e.set(r.name,r);for(const s of r.handoffs)s instanceof mt?e.has(s.name)||t.push(s):s.agent&&(e.has(s.agent.name)||t.push(s.agent))}}return e}function sa(n,e){const t=e.span_data,r=e.previous_span?sa(n,e.previous_span):void 0,s=Se().createSpan({spanId:e.id,traceId:e.trace_id,parentId:e.parent_id??void 0,startedAt:e.started_at??void 0,endedAt:e.ended_at??void 0,data:t},n);return s.previousSpan=r,s}function aa(n){const e=new Dn;return e.requests=n.usage.requests,e.inputTokens=n.usage.inputTokens,e.outputTokens=n.usage.outputTokens,e.totalTokens=n.usage.totalTokens,{usage:e,output:n.output.map(t=>vr.parse(t)),responseId:n.responseId}}function ia(n,e){switch(n.type){case"message_output_item":return new Pn(n.rawItem,e.get(n.agent.name));case"tool_call_item":return new Ut(n.rawItem,e.get(n.agent.name));case"tool_call_output_item":return new ht(n.rawItem,e.get(n.agent.name),n.output);case"reasoning_item":return new wr(n.rawItem,e.get(n.agent.name));case"handoff_call_item":return new br(n.rawItem,e.get(n.agent.name));case"handoff_output_item":return new xr(n.rawItem,e.get(n.sourceAgent.name),e.get(n.targetAgent.name));case"tool_approval_item":return new et(n.rawItem,e.get(n.agent.name))}}async function vu(n,e,t){const r=await e.getAllTools(),s=new Map(r.filter(c=>c.type==="function").map(c=>[c.name,c])),a=new Map(r.filter(c=>c.type==="computer").map(c=>[c.name,c])),i=new Map(e.handoffs.map(c=>c instanceof mt?[c.name,Rs(c)]:[c.toolName,c])),o={newItems:t.newItems.map(c=>ia(c,n)),toolsUsed:t.toolsUsed,handoffs:t.handoffs.map(c=>{if(!i.has(c.handoff.toolName))throw new Q(`Handoff ${c.handoff.toolName} not found`);return{toolCall:c.toolCall,handoff:i.get(c.handoff.toolName)}}),functions:await Promise.all(t.functions.map(async c=>{if(!s.has(c.tool.name))throw new Q(`Tool ${c.tool.name} not found`);return{toolCall:c.toolCall,tool:s.get(c.tool.name)}})),computerActions:t.computerActions.map(c=>{const p=c.computer.name;if(!a.has(p))throw new Q(`Computer tool ${p} not found`);return{toolCall:c.toolCall,computer:a.get(p)}})};return{...o,hasToolsOrApprovalsToRun(){return o.handoffs.length>0||o.functions.length>0||o.computerActions.length>0}}}const oa=10;function ua(n,e){return n?!1:e?!0:"enabled_without_data"}function $n(n,e){const t=e.map(r=>r.rawItem);return typeof n=="string"&&(n=[{type:"message",role:"user",content:n}]),[...n,...t]}class wu extends Mo{constructor(t={}){super();S(this,re);_(this,"config");_(this,"inputGuardrailDefs");_(this,"outputGuardrailDefs");this.config={modelProvider:t.modelProvider??Lo(),model:t.model,modelSettings:t.modelSettings,handoffInputFilter:t.handoffInputFilter,inputGuardrails:t.inputGuardrails,outputGuardrails:t.outputGuardrails,tracingDisabled:t.tracingDisabled??!1,traceIncludeSensitiveData:t.traceIncludeSensitiveData??!0,workflowName:t.workflowName??"Agent workflow",traceId:t.traceId,groupId:t.groupId,traceMetadata:t.traceMetadata},this.inputGuardrailDefs=(t.inputGuardrails??[]).map(Os),this.outputGuardrailDefs=(t.outputGuardrails??[]).map(fr)}run(t,r,s={stream:!1,context:void 0}){return r instanceof tt&&r._trace?vo(r._trace,async()=>(r._currentAgentSpan&&Cn(r._currentAgentSpan),s!=null&&s.stream?Z(this,re,Pr).call(this,t,r,s):Z(this,re,Nr).call(this,t,r,s))):wo(async()=>s!=null&&s.stream?Z(this,re,Pr).call(this,t,r,s):Z(this,re,Nr).call(this,t,r,s))}}re=new WeakSet,Nr=async function(t,r,s){return or(async()=>{var i,o;const a=r instanceof tt?r:new tt(s.context instanceof ft?s.context:new ft(s.context),r,t,s.maxTurns??oa);try{for(;;){let c=a._currentAgent.model??this.config.model;if(typeof c=="string"&&(c=await this.config.modelProvider.getModel(c)),a._currentStep=a._currentStep??{type:"next_step_run_again"},a._currentStep.type==="next_step_interruption"){if(I.debug("Continuing from interruption"),!a._lastTurnResponse||!a._lastProcessedResponse)throw new Q("No model response found in previous state",a);const p=await Vs(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=p.originalInput,a._generatedItems=p.generatedItems,a._currentStep=p.nextStep;continue}if(a._currentStep.type==="next_step_run_again"){const p=a._currentAgent.handoffs.map(En);if(!a._currentAgentSpan){const J=p.map(se=>se.agentName);a._currentAgentSpan=Is({data:{name:a._currentAgent.name,handoffs:J,output_type:a._currentAgent.outputSchemaName}}),a._currentAgentSpan.start(),Cn(a._currentAgentSpan)}const l=await a._currentAgent.getAllTools(),h=l.map(J=>Us(J)),f=p.map(J=>Js(J));if(a._currentAgentSpan&&(a._currentAgentSpan.spanData.tools=l.map(J=>J.name)),a._currentTurn++,a._currentTurn>a._maxTurns)throw(i=a._currentAgentSpan)==null||i.setError({message:"Max turns exceeded",data:{max_turns:a._maxTurns}}),new Hr(`Max turns (${a._maxTurns}) exceeded`,a);I.debug(`Running agent ${a._currentAgent.name} (turn ${a._currentTurn})`),a._currentTurn===1&&await Z(this,re,Rr).call(this,a);const b=$n(a._originalInput,a._generatedItems);a._noActiveAgentRun&&(a._currentAgent.emit("agent_start",a._context,a._currentAgent),this.emit("agent_start",a._context,a._currentAgent));let A={...this.config.modelSettings,...a._currentAgent.modelSettings};A=zs(a._currentAgent,a._toolUseTracker,A),a._lastTurnResponse=await c.getResponse({systemInstructions:await a._currentAgent.getSystemPrompt(a._context),input:b,previousResponseId:s.previousResponseId,modelSettings:A,tools:h,outputType:Qr(a._currentAgent.outputType),handoffs:f,tracing:ua(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:s.signal}),a._modelResponses.push(a._lastTurnResponse),a._context.usage.add(a._lastTurnResponse.usage),a._noActiveAgentRun=!1;const q=Gs(a._lastTurnResponse,a._currentAgent,l,p);a._lastProcessedResponse=q;const $=await qs(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=$.originalInput,a._generatedItems=$.generatedItems,a._currentStep=$.nextStep}if(a._currentStep&&a._currentStep.type==="next_step_final_output")return await Z(this,re,Dr).call(this,a,a._currentStep.output),this.emit("agent_end",a._context,a._currentAgent,a._currentStep.output),a._currentAgent.emit("agent_end",a._context,a._currentStep.output),new Ls(a);if(a._currentStep&&a._currentStep.type==="next_step_handoff")a._currentAgent=a._currentStep.newAgent,a._currentAgentSpan&&(a._currentAgentSpan.end(),Zt(),a._currentAgentSpan=void 0),a._noActiveAgentRun=!0,a._currentStep={type:"next_step_run_again"};else{if(a._currentStep&&a._currentStep.type==="next_step_interruption")return new Ls(a);I.debug("Running next loop")}}}catch(c){throw a._currentAgentSpan&&a._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(c)}}),c}finally{a._currentAgentSpan&&(((o=a._currentStep)==null?void 0:o.type)!=="next_step_interruption"&&a._currentAgentSpan.end(),Zt())}})},Rr=async function(t){const r=this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(Os));if(r.length>0){const s={agent:t._currentAgent,input:t._originalInput,context:t._context};try{const a=await Promise.all(r.map(async i=>Cs(async o=>{const c=await i.run(s);return o.spanData.triggered=c.output.tripwireTriggered,c},{data:{name:i.name}},t._currentAgentSpan)));for(const i of a)if(i.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:i.guardrail.name}}),new Xr(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`,i,t)}catch(a){throw a instanceof Xr?a:(t._currentTurn--,new Yr(`Input guardrail failed to complete: ${a}`,a,t))}}},Dr=async function(t,r){const s=this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(fr));if(s.length>0){const a=t._currentAgent.processFinalOutput(r),i={agent:t._currentAgent,agentOutput:a,context:t._context};try{const o=await Promise.all(s.map(async c=>Cs(async p=>{const l=await c.run(i);return p.spanData.triggered=l.output.tripwireTriggered,l},{data:{name:c.name}},t._currentAgentSpan)));for(const c of o)if(c.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:c.guardrail.name}}),new pn(`Output guardrail triggered: ${JSON.stringify(c.output.outputInfo)}`,c,t)}catch(o){throw o instanceof pn?o:new Yr(`Output guardrail failed to complete: ${o}`,o,t)}}},ba=async function(t,r){var s,a,i;try{for(;;){const o=t.state._currentAgent,c=o.handoffs.map(En),p=await o.getAllTools(),l=p.map(f=>Us(f)),h=c.map(f=>Js(f));if(t.state._currentStep=t.state._currentStep??{type:"next_step_run_again"},t.state._currentStep.type==="next_step_interruption"){if(I.debug("Continuing from interruption"),!t.state._lastTurnResponse||!t.state._lastProcessedResponse)throw new Q("No model response found in previous state",t.state);const f=await Vs(t.state._currentAgent,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);Ys(t,f),t.state._toolUseTracker.addToolUse(t.state._currentAgent,t.state._lastProcessedResponse.toolsUsed),t.state._originalInput=f.originalInput,t.state._generatedItems=f.generatedItems,t.state._currentStep=f.nextStep;continue}if(t.state._currentStep.type==="next_step_run_again"){if(!t.state._currentAgentSpan){const se=c.map(ce=>ce.agentName);t.state._currentAgentSpan=Is({data:{name:o.name,handoffs:se,tools:p.map(ce=>ce.name),output_type:o.outputSchemaName}}),t.state._currentAgentSpan.start(),Cn(t.state._currentAgentSpan)}if(t.state._currentTurn++,t.state._currentTurn>t.state._maxTurns)throw(s=t.state._currentAgentSpan)==null||s.setError({message:"Max turns exceeded",data:{max_turns:t.state._maxTurns}}),new Hr(`Max turns (${t.state._maxTurns}) exceeded`,t.state);I.debug(`Running agent ${o.name} (turn ${t.state._currentTurn})`);let f=o.model??this.config.model;typeof f=="string"&&(f=await this.config.modelProvider.getModel(f)),t.state._currentTurn===1&&await Z(this,re,Rr).call(this,t.state);let b={...this.config.modelSettings,...o.modelSettings};b=zs(o,t.state._toolUseTracker,b);const A=$n(t.input,t.newItems);t.state._noActiveAgentRun&&(o.emit("agent_start",t.state._context,o),this.emit("agent_start",t.state._context,o));let q;for await(const se of f.getStreamedResponse({systemInstructions:await o.getSystemPrompt(t.state._context),input:A,previousResponseId:r.previousResponseId,modelSettings:b,tools:l,handoffs:h,outputType:Qr(o.outputType),tracing:ua(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:r.signal})){if(se.type==="response_done"){const ce=$s.parse(se);q={usage:new Dn(ce.response.usage),output:ce.response.output,responseId:ce.response.id}}if(t.cancelled)return;t._addItem(new iu(se))}if(t.state._noActiveAgentRun=!1,!q)throw new he("Model did not procude a final response!",t.state);t.state._lastTurnResponse=q,t.state._modelResponses.push(t.state._lastTurnResponse);const $=Gs(t.state._lastTurnResponse,o,p,c);t.state._lastProcessedResponse=$;const J=await qs(o,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);Ys(t,J),t.state._toolUseTracker.addToolUse(o,$.toolsUsed),t.state._originalInput=J.originalInput,t.state._generatedItems=J.generatedItems,t.state._currentStep=J.nextStep}if(t.state._currentStep.type==="next_step_final_output"){await Z(this,re,Dr).call(this,t.state,t.state._currentStep.output);return}else{if(t.state._currentStep.type==="next_step_interruption")return;t.state._currentStep.type==="next_step_handoff"?(t.state._currentAgent=(a=t.state._currentStep)==null?void 0:a.newAgent,t.state._currentAgentSpan&&(t.state._currentAgentSpan.end(),Zt()),t.state._currentAgentSpan=void 0,t._addItem(new uu(o)),t.state._noActiveAgentRun=!0,t.state._currentStep={type:"next_step_run_again"}):I.debug("Running next loop")}}}catch(o){throw t.state._currentAgentSpan&&t.state._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(o)}}),o}finally{t.state._currentAgentSpan&&(((i=t.state._currentStep)==null?void 0:i.type)!=="next_step_interruption"&&t.state._currentAgentSpan.end(),Zt())}},Pr=async function(t,r,s){return s=s??{},or(async()=>{const a=r instanceof tt?r:new tt(s.context instanceof ft?s.context:new ft(s.context),r,t,s.maxTurns??oa),i=new su({signal:s.signal,state:a});return i.maxTurns=s.maxTurns??a._maxTurns,Z(this,re,ba).call(this,i,s).then(()=>{i._done()},o=>{i._raiseError(o)}),i})};class mt extends Zo{constructor(t){super();_(this,"name");_(this,"instructions");_(this,"handoffDescription");_(this,"handoffs");_(this,"model");_(this,"modelSettings");_(this,"tools");_(this,"mcpServers");_(this,"inputGuardrails");_(this,"outputGuardrails");_(this,"outputType","text");_(this,"toolUseBehavior");_(this,"resetToolChoice");if(typeof t.name!="string"||t.name.trim()==="")throw new Q("Agent must have a name.");if(this.name=t.name,this.instructions=t.instructions??"",this.handoffDescription=t.handoffDescription??"",this.handoffs=t.handoffs??[],this.model=t.model??"",this.modelSettings=t.modelSettings??{},this.tools=t.tools??[],this.mcpServers=t.mcpServers??[],this.inputGuardrails=t.inputGuardrails??[],this.outputGuardrails=t.outputGuardrails??[],t.outputType&&(this.outputType=t.outputType),this.toolUseBehavior=t.toolUseBehavior??"run_llm_again",this.resetToolChoice=t.resetToolChoice??!0,(t.handoffOutputTypeWarningEnabled===void 0||t.handoffOutputTypeWarningEnabled)&&this.handoffs&&this.outputType){const r=new Set([JSON.stringify(this.outputType)]);for(const s of this.handoffs)"outputType"in s&&s.outputType?r.add(JSON.stringify(s.outputType)):"agent"in s&&s.agent.outputType&&r.add(JSON.stringify(s.agent.outputType));r.size>1&&I.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`)}}static create(t){return new mt({...t,handoffs:t.handoffs,outputType:t.outputType,handoffOutputTypeWarningEnabled:!1})}get outputSchemaName(){if(this.outputType==="text")return"text";if(Ve(this.outputType))return"ZodOutput";if(typeof this.outputType=="object")return this.outputType.name;throw new Error(`Unknown output type: ${this.outputType}`)}clone(t){return new mt({...this,...t})}asTool(t){const{toolName:r,toolDescription:s,customOutputExtractor:a}=t;return mn({name:r??fn(this.name),description:s??"",parameters:{type:"object",properties:{input:{type:"string"}},required:["input"],additionalProperties:!1},strict:!0,execute:async(i,o)=>{if(!Si(i))throw new he("Agent tool called with invalid input");const p=await new wu().run(this,i.input,{context:o==null?void 0:o.context});return typeof a=="function"?a(p):au(p.rawResponses[p.rawResponses.length-1])}})}async getSystemPrompt(t){return typeof this.instructions=="function"?await this.instructions(t,this):this.instructions}async getMcpTools(){return this.mcpServers.length>0?uo(this.mcpServers):[]}async getAllTools(){return[...await this.getMcpTools(),...this.tools]}processFinalOutput(t){if(this.outputType==="text")return t;if(typeof this.outputType=="object"){const r=JSON.parse(t);return Ve(this.outputType)?this.outputType.parse(r):r}throw new Error(`Unknown output type: ${this.outputType}`)}toJSON(){return{name:this.name}}}jo(Ss());class bu extends mt{constructor(t){super(t);_(this,"voice");this.voice=t.voice??"ash"}}function xu(n){return{debounceTextLength:n.debounceTextLength??100}}function Su({policyHint:n,...e}){const t=fr(e),r=n??t.name;return{...t,policyHint:r,run:async s=>{const a=await t.run(s);return{...a,guardrail:{...a.guardrail,policyHint:r}}}}}function Tu(n){return`
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo??{})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim()}const Ee=as("openai-agents:realtime");g({itemId:d()});const ca=de("role",[g({itemId:d(),previousItemId:d().nullable().optional(),type:m("message"),role:m("system"),content:G(g({type:m("input_text"),text:d()}))}),g({itemId:d(),previousItemId:d().nullable().optional(),type:m("message"),role:m("user"),status:oe(["in_progress","completed"]),content:G(g({type:m("input_text"),text:d()}).or(g({type:m("input_audio"),audio:d().nullable().optional(),transcript:d().nullable()})))}),g({itemId:d(),previousItemId:d().nullable().optional(),type:m("message"),role:m("assistant"),status:oe(["in_progress","completed","incomplete"]),content:G(g({type:m("text"),text:d()}).or(g({type:m("audio"),audio:d().nullable().optional(),transcript:d().nullable().optional()})))})]),da=g({itemId:d(),previousItemId:d().nullable().optional(),type:m("function_call"),status:oe(["in_progress","completed"]),arguments:d(),name:d(),output:d().nullable()}),la=g({id:d().optional().nullable(),conversation_id:d().optional().nullable(),max_output_tokens:k().or(m("inf")).optional().nullable(),metadata:ie(d(),U()).optional().nullable(),modalities:G(d()).optional().nullable(),object:m("realtime.response").optional().nullable(),output:G(U()).optional().nullable(),output_audio_format:d().optional().nullable(),status:oe(["completed","incomplete","failed","cancelled","in_progress"]).optional().nullable(),status_details:ie(d(),U()).optional().nullable(),usage:g({input_tokens:k().optional(),input_tokens_details:ie(d(),U()).optional().nullable(),output_tokens:k().optional(),output_tokens_details:ie(d(),U()).optional().nullable()}).optional().nullable(),voice:d().optional().nullable()}),ku=g({id:d().optional(),audio:d().nullable().optional(),text:d().nullable().optional(),transcript:d().nullable().optional(),type:vs([m("input_text"),m("input_audio"),m("item_reference"),m("text"),m("audio")])}),Jt=g({id:d().optional(),arguments:d().optional(),call_id:d().optional(),content:G(ku).optional(),name:d().optional(),object:m("realtime.item").optional(),output:d().optional(),role:oe(["user","assistant","system"]).optional(),status:oe(["completed","incomplete","in_progress"]).optional(),type:oe(["message","function_call","function_call_output"]).optional()}),Iu=g({type:m("conversation.created"),event_id:d(),conversation:g({id:d().optional(),object:m("realtime.conversation").optional()})}),Au=g({type:m("conversation.item.created"),event_id:d(),item:Jt,previous_item_id:d().nullable().optional()}),Cu=g({type:m("conversation.item.deleted"),event_id:d(),item_id:d()}),Ou=g({type:m("conversation.item.input_audio_transcription.completed"),event_id:d(),item_id:d(),content_index:k(),transcript:d(),logprobs:G(U()).nullable().optional()}),Eu=g({type:m("conversation.item.input_audio_transcription.delta"),event_id:d(),item_id:d(),content_index:k().optional(),delta:d().optional(),logprobs:G(U()).nullable().optional()}),Nu=g({type:m("conversation.item.input_audio_transcription.failed"),event_id:d(),item_id:d(),content_index:k(),error:g({code:d().optional(),message:d().optional(),param:d().optional(),type:d().optional()})}),Ru=g({type:m("conversation.item.retrieved"),event_id:d(),item:Jt}),Du=g({type:m("conversation.item.truncated"),event_id:d(),item_id:d(),audio_end_ms:k(),content_index:k()}),Pu=g({type:m("conversation.item.create"),item:Jt,event_id:d().optional(),previous_item_id:d().nullable().optional()}),ju=g({type:m("conversation.item.delete"),item_id:d(),event_id:d().optional()}),Zu=g({type:m("conversation.item.retrieve"),item_id:d(),event_id:d().optional()}),Mu=g({type:m("conversation.item.truncate"),item_id:d(),audio_end_ms:k(),content_index:k(),event_id:d().optional()}),$u=g({type:m("error"),event_id:d().optional(),error:U().optional()}),Fu=g({type:m("input_audio_buffer.cleared"),event_id:d()}),Lu=g({type:m("input_audio_buffer.append"),audio:d(),event_id:d().optional()}),Uu=g({type:m("input_audio_buffer.clear"),event_id:d().optional()}),Ju=g({type:m("input_audio_buffer.commit"),event_id:d().optional()}),Bu=g({type:m("input_audio_buffer.committed"),event_id:d(),item_id:d(),previous_item_id:d().nullable().optional()}),Gu=g({type:m("input_audio_buffer.speech_started"),event_id:d(),item_id:d(),audio_start_ms:k()}),zu=g({type:m("input_audio_buffer.speech_stopped"),event_id:d(),item_id:d(),audio_end_ms:k()}),Vu=g({type:m("output_audio_buffer.started"),event_id:d()}).passthrough(),qu=g({type:m("output_audio_buffer.stopped"),event_id:d()}).passthrough(),Wu=g({type:m("output_audio_buffer.cleared"),event_id:d()}),Hu=g({type:m("rate_limits.updated"),event_id:d(),rate_limits:G(g({limit:k().optional(),name:oe(["requests","tokens"]).optional(),remaining:k().optional(),reset_seconds:k().optional()}))}),Yu=g({type:m("response.audio.delta"),event_id:d(),item_id:d(),content_index:k(),delta:d(),output_index:k(),response_id:d()}),Xu=g({type:m("response.audio.done"),event_id:d(),item_id:d(),content_index:k(),output_index:k(),response_id:d()}),Qu=g({type:m("response.audio_transcript.delta"),event_id:d(),item_id:d(),content_index:k(),delta:d(),output_index:k(),response_id:d()}),Ku=g({type:m("response.audio_transcript.done"),event_id:d(),item_id:d(),content_index:k(),transcript:d(),output_index:k(),response_id:d()}),ec=g({type:m("response.content_part.added"),event_id:d(),item_id:d(),content_index:k(),output_index:k(),response_id:d(),part:g({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:oe(["text","audio"]).optional()})}),tc=g({type:m("response.content_part.done"),event_id:d(),item_id:d(),content_index:k(),output_index:k(),response_id:d(),part:g({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:oe(["text","audio"]).optional()})}),nc=g({type:m("response.created"),event_id:d(),response:la}),pa=g({type:m("response.done"),event_id:d(),response:la}),rc=g({type:m("response.function_call_arguments.delta"),event_id:d(),item_id:d(),call_id:d(),delta:d(),output_index:k(),response_id:d()}),sc=g({type:m("response.function_call_arguments.done"),event_id:d(),item_id:d(),call_id:d(),arguments:d(),output_index:k(),response_id:d()}),ac=g({type:m("response.output_item.added"),event_id:d(),item:Jt,output_index:k(),response_id:d()}),ic=g({type:m("response.output_item.done"),event_id:d(),item:Jt,output_index:k(),response_id:d()}),oc=g({type:m("response.text.delta"),event_id:d(),item_id:d(),content_index:k(),delta:d(),output_index:k(),response_id:d()}),uc=g({type:m("response.text.done"),event_id:d(),item_id:d(),content_index:k(),text:d(),output_index:k(),response_id:d()}),cc=g({type:m("session.created"),event_id:d(),session:U()}),dc=g({type:m("session.updated"),event_id:d(),session:U()}),lc=g({type:m("response.cancel"),event_id:d().optional(),response_id:d().optional()}),pc=g({type:m("response.create"),event_id:d().optional(),response:U().optional()}),fc=g({type:m("session.update"),event_id:d().optional(),session:U()}),hc=g({type:m("transcription_session.update"),event_id:d().optional(),session:U()}),mc=g({type:m("transcription_session.updated"),event_id:d(),session:U()}),gc=g({type:d(),event_id:d().optional().nullable()}).passthrough(),_c=de("type",[Iu,Au,Cu,Ou,Eu,Nu,Ru,Du,$u,Fu,Bu,Gu,zu,Vu,qu,Wu,Hu,Yu,Xu,Qu,Ku,ec,tc,nc,pa,rc,sc,ac,ic,oc,uc,cc,dc,mc]);de("type",[Pu,ju,Zu,Mu,Lu,Uu,Ju,lc,pc,fc,hc]);function Sr(n){const e=JSON.parse(n.data.toString()),t=_c.safeParse(e);if(!t.success){const r=gc.safeParse(e);return r.success?{data:r.data,isGeneric:!0}:{data:null,isGeneric:!0}}return{data:t.data,isGeneric:!1}}const fa="gpt-4o-realtime-preview",Ne={voice:"ash",modalities:["text","audio"],inputAudioFormat:"pcm16",outputAudioFormat:"pcm16",inputAudioTranscription:{model:"gpt-4o-mini-transcribe"},turnDetection:{type:"semantic_vad"}};class Tr extends pr{constructor(t={}){super();S(this,at);S(this,nn);S(this,fe,null);_(this,"eventEmitter",new An);y(this,at,t.model??fa),y(this,nn,t.apiKey)}get currentModel(){return u(this,at)}set currentModel(t){y(this,at,t)}async _getApiKey(t){const r=t.apiKey??u(this,nn);return typeof r=="function"?await r():r}_onMessage(t){var a,i,o,c,p,l;const{data:r,isGeneric:s}=Sr(t);if(r!==null&&(this.emit("*",r),!s)){if(r.type==="error"?this.emit("error",{type:"error",error:r}):this.emit(r.type,r),r.type==="response.created"){this.emit("turn_started",{type:"response_started",providerData:{...r}});return}if(r.type==="response.done"){const h=pa.safeParse(r);if(!h.success){Ee.error("Error parsing response done event",h.error);return}const f=((a=h.data.response.usage)==null?void 0:a.input_tokens)??0,b=((i=h.data.response.usage)==null?void 0:i.output_tokens)??0,A=f+b,q=new Dn({inputTokens:f,inputTokensDetails:((o=h.data.response.usage)==null?void 0:o.input_tokens_details)??{},outputTokens:b,outputTokensDetails:((c=h.data.response.usage)==null?void 0:c.output_tokens_details)??{},totalTokens:A});this.emit("usage_update",q),this.emit("turn_done",{type:"response_done",response:{id:h.data.response.id??"",output:h.data.response.output??[],usage:{inputTokens:f,inputTokensDetails:((p=h.data.response.usage)==null?void 0:p.input_tokens_details)??{},outputTokens:b,outputTokensDetails:((l=h.data.response.usage)==null?void 0:l.output_tokens_details)??{},totalTokens:A}}});return}if(r.type==="response.audio.done"){this.emit("audio_done");return}if(r.type==="conversation.item.deleted"){this.emit("item_deleted",{itemId:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.completed"||r.type==="conversation.item.truncated"){this.sendEvent({type:"conversation.item.retrieve",item_id:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.delta"||r.type==="response.text.delta"||r.type==="response.audio_transcript.delta"||r.type==="response.function_call_arguments.delta"){r.type==="response.audio_transcript.delta"&&this.emit("audio_transcript_delta",{type:"transcript_delta",delta:r.delta,itemId:r.item_id,responseId:r.response_id});return}if((r.type==="conversation.item.created"||r.type==="conversation.item.retrieved")&&r.item.type==="message"){const h=r.type==="conversation.item.created"?r.previous_item_id:null,f=ca.parse({itemId:r.item.id,previousItemId:h,type:r.item.type,role:r.item.role,content:r.item.content,status:r.item.status});this.emit("item_update",f);return}if(r.type==="response.output_item.done"||r.type==="response.output_item.added"){const h=r.item;if(h.type==="function_call"&&h.status==="completed"){const f=da.parse({itemId:h.id,type:h.type,status:"in_progress",arguments:h.arguments,name:h.name,output:null});this.emit("item_update",f),this.emit("function_call",{id:h.id,type:"function_call",callId:h.call_id??"",arguments:h.arguments??"",name:h.name??""});return}if(h.type==="message"){const f=ca.parse({itemId:r.item.id,type:r.item.type,role:r.item.role,content:r.item.content,status:"in_progress"});this.emit("item_update",f);return}}}}_onError(t){this.emit("error",{type:"error",error:t})}_onOpen(){this.emit("connected")}_onClose(){this.emit("disconnected")}sendMessage(t,r){this.sendEvent({type:"conversation.item.create",item:typeof t=="string"?{type:"message",role:"user",content:[{type:"input_text",text:t}]}:t,...r}),this.sendEvent({type:"response.create"})}_getMergedSessionConfig(t){var s;return{instructions:t.instructions,model:t.model??u(this,at)??Ne.model,voice:t.voice??Ne.voice,modalities:t.modalities??Ne.modalities,input_audio_format:t.inputAudioFormat??Ne.inputAudioFormat,output_audio_format:t.outputAudioFormat??Ne.outputAudioFormat,input_audio_transcription:t.inputAudioTranscription??Ne.inputAudioTranscription,turn_detection:t.turnDetection??Ne.turnDetection,tool_choice:t.toolChoice??Ne.toolChoice,tools:(s=t.tools)==null?void 0:s.map(a=>({...a,strict:void 0})),...t.providerData??{}}}set _tracingConfig(t){y(this,fe,t)}_updateTracingConfig(t){var r,s,a;if(typeof u(this,fe)>"u"&&y(this,fe,null),t==="auto"){this.sendEvent({type:"session.update",session:{tracing:"auto"}});return}if(typeof u(this,fe)!="string"&&typeof t!="string"){Ee.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");return}if(t===null){Ee.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."),this.sendEvent({type:"session.update",session:{tracing:null}});return}if(u(this,fe)===null||typeof u(this,fe)=="string"){this.sendEvent({type:"session.update",session:{tracing:t}});return}if((t==null?void 0:t.group_id)!==((r=u(this,fe))==null?void 0:r.group_id)||(t==null?void 0:t.metadata)!==((s=u(this,fe))==null?void 0:s.metadata)||(t==null?void 0:t.workflow_name)!==((a=u(this,fe))==null?void 0:a.workflow_name)){Ee.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s",JSON.stringify(u(this,fe)),JSON.stringify(t));return}this.sendEvent({type:"session.update",session:{tracing:t}})}updateSessionConfig(t){const r=this._getMergedSessionConfig(t);this.sendEvent({type:"session.update",session:r})}sendFunctionCallOutput(t,r,s=!0){this.sendEvent({type:"conversation.item.create",item:{type:"function_call_output",output:r,call_id:t.callId}});try{const a=da.parse({itemId:t.id,previousItemId:t.previousItemId,type:"function_call",status:"completed",arguments:t.arguments,name:t.name,output:r});this.emit("item_update",a)}catch(a){Ee.error("Error parsing tool call item",a,t)}s&&this.sendEvent({type:"response.create"})}sendAudio(t,{commit:r=!1}={}){this.sendEvent({type:"input_audio_buffer.append",audio:Ct(t)}),r&&this.sendEvent({type:"input_audio_buffer.commit"})}resetHistory(t,r){const{removals:s,additions:a,updates:i}=Ia(t,r),o=new Set(s.map(p=>p.itemId));for(const p of i)o.add(p.itemId);if(o.size>0)for(const p of o)this.sendEvent({type:"conversation.item.delete",item_id:p});const c=[...a,...i];for(const p of c)if(p.type==="message"){const l={type:"message",role:p.role,content:p.content,id:p.itemId};p.role!=="system"&&p.status&&(l.status=p.status),this.sendEvent({type:"conversation.item.create",item:l})}else p.type==="function_call"&&Ee.warn("Function calls cannot be manually added or updated at the moment. Ignoring.")}}at=new WeakMap,nn=new WeakMap,fe=new WeakMap;class ha extends Tr{constructor(t={}){if(typeof RTCPeerConnection>"u")throw new Error("WebRTC is not supported in this environment");super(t);_(this,"options");S(this,rn);S(this,V,{status:"disconnected",peerConnection:void 0,dataChannel:void 0});S(this,sn);S(this,it,!1);S(this,an,!1);this.options=t,y(this,rn,t.baseUrl??"https://api.openai.com/v1/realtime"),y(this,sn,t.useInsecureApiKey??!1)}get status(){return u(this,V).status}get connectionState(){return u(this,V)}get muted(){return u(this,an)}async connect(t){if(u(this,V).status==="connected")return;u(this,V).status==="connecting"&&Ee.warn("Realtime connection already in progress. Please await original promise");const r=t.model??this.currentModel;this.currentModel=r;const s=t.url??u(this,rn),a=await this._getApiKey(t),i=typeof a=="string"&&a.startsWith("ek_");if(!u(this,sn)&&!i)throw new Q("Using the WebRTC connection in a browser environment requires an insecure API key. Please use a WebSocket connection instead or set the useInsecureApiKey option to true.");return new Promise(async(o,c)=>{try{const p={...t.initialSessionConfig||{},model:this.currentModel},l=new URL(s);let h=new RTCPeerConnection;const f=h.createDataChannel("oai-events");y(this,V,{status:"connecting",peerConnection:h,dataChannel:f}),this.emit("connection_change",u(this,V).status),f.addEventListener("open",()=>{y(this,V,{status:"connected",peerConnection:h,dataChannel:f}),this.updateSessionConfig(p),this.emit("connection_change",u(this,V).status),this._onOpen(),o()}),f.addEventListener("error",je=>{this.close(),this._onError(je),c(je)}),f.addEventListener("message",je=>{this._onMessage(je);const{data:ke,isGeneric:ga}=Sr(je);!ke||ga||(ke.type==="response.created"?y(this,it,!0):ke.type==="response.done"&&y(this,it,!1),ke.type==="session.created"&&(this._tracingConfig=ke.session.tracing,this._updateTracingConfig(p.tracing??"auto")))});const b=this.options.audioElement??document.createElement("audio");b.autoplay=!0,h.ontrack=je=>{b.srcObject=je.streams[0]};const A=this.options.mediaStream??await navigator.mediaDevices.getUserMedia({audio:!0});h.addTrack(A.getAudioTracks()[0]),this.options.changePeerConnection&&(h=await this.options.changePeerConnection(h),y(this,V,{...u(this,V),peerConnection:h}));const q=await h.createOffer();if(await h.setLocalDescription(q),!q.sdp)throw new Error("Failed to create offer");const $={...this._getMergedSessionConfig(p),model:this.currentModel},J=new FormData;J.append("sdp",q.sdp),J.append("session",JSON.stringify($));const ce={type:"answer",sdp:await(await fetch(l,{method:"POST",body:J,headers:{Authorization:`Bearer ${a}`,"X-OpenAI-Agents-SDK":Oa["X-OpenAI-Agents-SDK"]}})).text()};await h.setRemoteDescription(ce)}catch(p){this.close(),this._onError(p),c(p)}})}sendEvent(t){if(!u(this,V).dataChannel||u(this,V).dataChannel.readyState!=="open")throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");u(this,V).dataChannel.send(JSON.stringify(t))}mute(t){y(this,an,t),u(this,V).peerConnection&&u(this,V).peerConnection.getSenders().forEach(s=>{s.track&&(s.track.enabled=!t)})}close(){if(u(this,V).dataChannel&&u(this,V).dataChannel.close(),u(this,V).peerConnection){const t=u(this,V).peerConnection;t.getSenders().forEach(r=>{var s;(s=r.track)==null||s.stop()}),t.close()}u(this,V).status!=="disconnected"&&(y(this,V,{status:"disconnected",peerConnection:void 0,dataChannel:void 0}),this.emit("connection_change",u(this,V).status),this._onClose())}interrupt(){u(this,it)&&(this.sendEvent({type:"response.cancel"}),y(this,it,!1)),this.sendEvent({type:"output_audio_buffer.clear"})}}rn=new WeakMap,V=new WeakMap,sn=new WeakMap,it=new WeakMap,an=new WeakMap;const yc=globalThis.WebSocket;class ma extends Tr{constructor(t={}){super(t);S(this,Ln);S(this,ot);S(this,St);S(this,K,{status:"disconnected",websocket:void 0});S(this,on);S(this,Pe);S(this,ut);_(this,"_firstAudioTimestamp");_(this,"_audioLengthMs",0);S(this,ct,!1);y(this,St,`wss://api.openai.com/v1/realtime?model=${this.currentModel}`),y(this,on,t.useInsecureApiKey??!1)}get status(){return u(this,K).status}get connectionState(){return u(this,K)}get muted(){return null}get currentItemId(){return u(this,Pe)}_onAudio(t){this.emit("audio",t)}async connect(t){const r=t.model??this.currentModel;this.currentModel=r,y(this,ot,await this._getApiKey(t)),y(this,St,t.url??`wss://api.openai.com/v1/realtime?model=${this.currentModel}`);const s={...t.initialSessionConfig||{},model:this.currentModel};await new Promise((a,i)=>{try{Z(this,Ln,xa).call(this,a,i,s)}catch(o){i(o)}}),await this.updateSessionConfig(s)}sendEvent(t){if(!u(this,K).websocket)throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");u(this,K).websocket.send(JSON.stringify(t))}close(){var t;(t=u(this,K).websocket)==null||t.close(),y(this,Pe,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,ut,void 0)}mute(t){throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.")}sendAudio(t,r={}){u(this,K).status==="connected"&&super.sendAudio(t,r)}_cancelResponse(){u(this,ct)&&(this.sendEvent({type:"response.cancel"}),y(this,ct,!1))}_interrupt(t){this.emit("audio_interrupted"),this.sendEvent({type:"conversation.item.truncate",item_id:u(this,Pe),content_index:u(this,ut),audio_end_ms:t})}interrupt(){if(!u(this,Pe)||typeof this._firstAudioTimestamp!="number")return;this._cancelResponse();const t=Date.now()-this._firstAudioTimestamp;t>=0&&t<this._audioLengthMs&&this._interrupt(t),y(this,Pe,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,ut,void 0)}}ot=new WeakMap,St=new WeakMap,K=new WeakMap,on=new WeakMap,Pe=new WeakMap,ut=new WeakMap,ct=new WeakMap,Ln=new WeakSet,xa=function(t,r,s){if(u(this,K).websocket){t();return}if(!u(this,ot))throw new Q("API key is not set. Please call `connect()` with an API key first.");if(!u(this,ot).startsWith("ek_")&&!u(this,on))throw new Q("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");const a=["realtime","openai-insecure-api-key."+u(this,ot),"openai-beta.realtime-v1",Ea],i=new yc(u(this,St),a);y(this,K,{status:"connecting",websocket:i}),this.emit("connection_change",u(this,K).status),i.addEventListener("open",()=>{y(this,K,{status:"connected",websocket:i}),this.emit("connection_change",u(this,K).status),this._onOpen(),t()}),i.addEventListener("error",o=>{this._onError(o),y(this,K,{status:"disconnected",websocket:void 0}),this.emit("connection_change",u(this,K).status),r(o)}),i.addEventListener("message",o=>{this._onMessage(o);const{data:c,isGeneric:p}=Sr(o);if(!(!c||p))if(c.type==="response.audio.delta"){y(this,ut,c.content_index),y(this,Pe,c.item_id),this._firstAudioTimestamp===void 0&&(this._firstAudioTimestamp=Date.now(),this._audioLengthMs=0);const l=Y(c.delta);this._audioLengthMs+=l.byteLength/24/2;const h={type:"audio",data:l,responseId:c.response_id};this._onAudio(h)}else c.type==="input_audio_buffer.speech_started"?this.interrupt():c.type==="response.created"?y(this,ct,!0):c.type==="response.done"?y(this,ct,!1):c.type==="session.created"&&(this._tracingConfig=c.session.tracing,this._updateTracingConfig(s.tracing??"auto"))}),i.addEventListener("close",()=>{y(this,K,{status:"disconnected",websocket:void 0}),this.emit("connection_change",u(this,K).status),this._onClose()})};class vc extends An{constructor(t,r={}){super();S(this,W);_(this,"initialAgent");_(this,"options");S(this,L);S(this,P);S(this,un,[]);S(this,D);S(this,Tt,[]);S(this,kt);S(this,cn,{});S(this,H,[]);S(this,dn);S(this,It,{});this.initialAgent=t,this.options=r,typeof r.transport>"u"&&Aa()||r.transport==="webrtc"?y(this,L,new ha):r.transport==="websocket"||typeof r.transport>"u"?y(this,L,new ma):y(this,L,r.transport),y(this,P,t),y(this,D,new ft({...r.context??{},history:u(this,H)})),y(this,Tt,(r.outputGuardrails??[]).map(Su)),y(this,kt,xu(r.outputGuardrailSettings??{})),y(this,dn,r.historyStoreAudio??!1)}get transport(){return u(this,L)}get currentAgent(){return u(this,P)}get usage(){return u(this,D).usage}get context(){return u(this,D)}get muted(){return u(this,L).muted}get history(){return u(this,H)}async updateAgent(t){return u(this,P).emit("agent_handoff",u(this,D),t),this.emit("agent_handoff",u(this,D),u(this,P),t),await Z(this,W,Un).call(this,t),await u(this,L).updateSessionConfig(await Z(this,W,Jn).call(this)),t}async connect(t){await Z(this,W,Un).call(this,this.initialAgent),Z(this,W,ka).call(this),await u(this,L).connect({apiKey:t.apiKey??this.options.apiKey,model:this.options.model,initialSessionConfig:await Z(this,W,Jn).call(this,this.options.config)}),y(this,H,[]),this.emit("history_updated",u(this,H))}updateHistory(t){let r;typeof t=="function"?r=t(u(this,H)):r=t,u(this,L).resetHistory(u(this,H),r)}sendMessage(t,r={}){u(this,L).sendMessage(t,r)}mute(t){u(this,L).mute(t)}close(){y(this,It,{}),u(this,L).close()}sendAudio(t,r={}){u(this,L).sendAudio(t,r)}interrupt(){u(this,L).interrupt()}async approve(t,r={alwaysApprove:!1}){u(this,D).approveTool(t,r);const s=u(this,P).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function")await Z(this,W,Bn).call(this,t.rawItem,s);else throw new he(`Tool ${t.rawItem.name} not found`)}async reject(t,r={alwaysReject:!1}){u(this,D).rejectTool(t,r);const s=u(this,P).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function")await Z(this,W,Bn).call(this,t.rawItem,s);else throw new he(`Tool ${t.rawItem.name} not found`)}}L=new WeakMap,P=new WeakMap,un=new WeakMap,D=new WeakMap,Tt=new WeakMap,kt=new WeakMap,cn=new WeakMap,H=new WeakMap,dn=new WeakMap,It=new WeakMap,W=new WeakSet,Un=async function(t){y(this,P,t);const s=u(this,P).handoffs.map(En).map(a=>a.getHandoffAsFunctionTool());y(this,un,[...(await u(this,P).getAllTools()).filter(a=>a.type==="function"),...s])},Jn=async function(t={}){const r=await u(this,P).getSystemPrompt(u(this,D)),s=this.options.tracingDisabled?null:this.options.workflowName?{workflow_name:this.options.workflowName}:"auto";return s!==null&&s!=="auto"?(this.options.groupId&&(s.group_id=this.options.groupId),this.options.traceMetadata&&(s.metadata=this.options.traceMetadata)):(this.options.groupId||this.options.traceMetadata)&&Ee.warn("In order to set traceMetadata or a groupId you need to specify a workflowName."),{instructions:r,voice:u(this,P).voice,model:this.options.model,tools:u(this,un),tracing:s,...t}},Sa=async function(t,r){const s=await r.onInvokeHandoff(u(this,D),t.arguments);u(this,P).emit("agent_handoff",u(this,D),s),this.emit("agent_handoff",u(this,D),u(this,P),s),await Z(this,W,Un).call(this,s),await u(this,L).updateSessionConfig(await Z(this,W,Jn).call(this));const a=Es(s);return u(this,L).sendFunctionCallOutput(t,a,!0),s},Bn=async function(t,r){u(this,D).context.history=JSON.parse(JSON.stringify(u(this,H)));let s=t.arguments;if(r.parameters&&(Ve(r.parameters)?s=r.parameters.parse(s):s=JSON.parse(s)),await r.needsApproval(u(this,D),s,t.callId)){const c=this.context.isToolApproved({toolName:r.name,callId:t.callId});if(c===!1){this.emit("agent_tool_start",u(this,D),u(this,P),r),u(this,P).emit("agent_tool_start",u(this,D),r);const p="Tool execution was not approved.";u(this,L).sendFunctionCallOutput(t,p,!0),this.emit("agent_tool_end",u(this,D),u(this,P),r,p),u(this,P).emit("agent_tool_end",u(this,D),r,p);return}else if(typeof c>"u"){this.emit("tool_approval_requested",u(this,D),u(this,P),{type:"function_approval",tool:r,approvalItem:new et(t,u(this,P))});return}}this.emit("agent_tool_start",u(this,D),u(this,P),r),u(this,P).emit("agent_tool_start",u(this,D),r),u(this,D).context.history=JSON.parse(JSON.stringify(u(this,H)));const i=await r.invoke(u(this,D),t.arguments),o=qe(i);u(this,L).sendFunctionCallOutput(t,o,!0),this.emit("agent_tool_end",u(this,D),u(this,P),r,o),u(this,P).emit("agent_tool_end",u(this,D),r,o)},Ta=async function(t){const r=new Map(u(this,P).handoffs.map(En).map(i=>[i.toolName,i])),s=new Map((await u(this,P).getAllTools()).map(i=>[i.name,i])),a=r.get(t.name);if(a)await Z(this,W,Sa).call(this,t,a);else{const i=s.get(t.name);if(i&&i.type==="function")await Z(this,W,Bn).call(this,t,i);else throw new he(`Tool ${t.name} not found`)}},jr=async function(t,r){if(u(this,Tt).length===0)return;const s={agent:u(this,P),agentOutput:t,context:u(this,D)},i=(await Promise.all(u(this,Tt).map(o=>o.run(s)))).find(o=>o.output.tripwireTriggered);if(i){if(u(this,It)[r])return;u(this,It)[r]=!0;const o=new pn(`Output guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`,i);this.emit("guardrail_tripped",u(this,D),u(this,P),o),this.interrupt();const c=Tu(i);this.sendMessage(c);return}},ka=function(){u(this,L).on("*",s=>{this.emit("transport_event",s)}),u(this,L).on("audio",s=>{this.emit("audio",s)}),u(this,L).on("turn_started",()=>{this.emit("agent_start",u(this,D),u(this,P)),u(this,P).emit("agent_start",u(this,D),u(this,P))}),u(this,L).on("turn_done",s=>{const a=s.response.output[s.response.output.length-1],i=Zr(a)??"";this.emit("agent_end",u(this,D),u(this,P),i),u(this,P).emit("agent_end",u(this,D),i),Z(this,W,jr).call(this,i,s.response.id)}),u(this,L).on("audio_done",()=>{this.emit("audio_stopped",u(this,D),u(this,P))});let t=0,r;u(this,L).on("audio_transcript_delta",s=>{try{const a=s.delta,i=s.itemId,o=s.responseId;r!==i&&(r=i,t=0);const p=(u(this,cn)[i]??"")+a;if(u(this,cn)[i]=p,u(this,kt).debounceTextLength<0)return;const l=Math.floor(p.length/u(this,kt).debounceTextLength);l>t&&(t=l,Z(this,W,jr).call(this,p,o))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,L).on("item_update",s=>{try{const a=!u(this,H).some(i=>i.itemId===s.itemId);if(y(this,H,Ca(u(this,H),s,u(this,dn))),u(this,D).context.history=u(this,H),a){const i=u(this,H).find(o=>o.itemId===s.itemId);i&&this.emit("history_added",i)}this.emit("history_updated",u(this,H))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,L).on("item_deleted",s=>{try{y(this,H,u(this,H).filter(a=>a.itemId!==s.itemId)),u(this,D).context.history=u(this,H),this.emit("history_updated",u(this,H))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,L).on("function_call",async s=>{try{await Z(this,W,Ta).call(this,s)}catch(a){Ee.error("Error handling function call",a),this.emit("error",{type:"error",error:a})}}),u(this,L).on("usage_update",s=>{u(this,D).usage.add(s)}),u(this,L).on("audio_interrupted",()=>{this.emit("audio_interrupted",u(this,D),u(this,P))}),u(this,L).on("error",s=>{this.emit("error",s)})};const wc={base64ToArrayBuffer:Y,arrayBufferToBase64:Ct,getLastTextFromAudioOutputMessage:Zr};N.DEFAULT_OPENAI_REALTIME_MODEL=fa,N.DEFAULT_OPENAI_REALTIME_SESSION_CONFIG=Ne,N.ModelBehaviorError=he,N.OpenAIRealtimeBase=Tr,N.OpenAIRealtimeWebRTC=ha,N.OpenAIRealtimeWebSocket=ma,N.OutputGuardrailTripwireTriggered=pn,N.RealtimeAgent=bu,N.RealtimeSession=vc,N.UserError=Q,N.tool=mn,N.utils=wc,Object.defineProperty(N,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
